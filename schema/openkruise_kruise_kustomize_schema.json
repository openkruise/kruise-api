{
    "definitions": {
        "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
            "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
            "type": "object",
            "required": [
                "name",
                "versions"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "name is the name of the group.",
                    "type": "string",
                    "default": ""
                },
                "preferredVersion": {
                    "description": "preferredVersion is the version preferred by the API server, which probably is the storage version.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
                },
                "serverAddressByClientCIDRs": {
                    "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "versions": {
                    "description": "versions are the versions supported in this group.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "APIGroup",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
            "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
            "type": "object",
            "required": [
                "groups"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "groups": {
                    "description": "groups is a list of APIGroup.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "APIGroupList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
            "description": "APIResource specifies the name of a resource and whether it is namespaced.",
            "type": "object",
            "required": [
                "name",
                "singularName",
                "namespaced",
                "kind",
                "verbs"
            ],
            "properties": {
                "categories": {
                    "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "group": {
                    "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
                    "type": "string"
                },
                "kind": {
                    "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is the plural name of the resource.",
                    "type": "string",
                    "default": ""
                },
                "namespaced": {
                    "description": "namespaced indicates if a resource is namespaced or not.",
                    "type": "boolean",
                    "default": false
                },
                "shortNames": {
                    "description": "shortNames is a list of suggested short names of the resource.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "singularName": {
                    "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
                    "type": "string",
                    "default": ""
                },
                "storageVersionHash": {
                    "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
                    "type": "string"
                },
                "verbs": {
                    "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "version": {
                    "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
            "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
            "type": "object",
            "required": [
                "groupVersion",
                "resources"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "groupVersion": {
                    "description": "groupVersion is the group and version this APIResourceList is for.",
                    "type": "string",
                    "default": ""
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "resources": {
                    "description": "resources contains the name of the resources and if they are namespaced.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "APIResourceList",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions": {
            "description": "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
            "type": "object",
            "required": [
                "versions",
                "serverAddressByClientCIDRs"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "serverAddressByClientCIDRs": {
                    "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "versions": {
                    "description": "versions are the api versions that are available.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "APIVersions",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ApplyOptions": {
            "description": "ApplyOptions may be provided when applying an API object. FieldManager is required for apply requests. ApplyOptions is equivalent to PatchOptions. It is provided as a convenience with documentation that speaks specifically to how the options fields relate to apply.",
            "type": "object",
            "required": [
                "force",
                "fieldManager"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "dryRun": {
                    "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "fieldManager": {
                    "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required.",
                    "type": "string",
                    "default": ""
                },
                "force": {
                    "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people.",
                    "type": "boolean",
                    "default": false
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Condition": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "type": "object",
            "required": [
                "type",
                "status",
                "lastTransitionTime",
                "reason",
                "message"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                    "type": "string",
                    "default": ""
                },
                "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                    "type": "integer",
                    "format": "int64"
                },
                "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                    "type": "string",
                    "default": ""
                },
                "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.CreateOptions": {
            "description": "CreateOptions may be provided when creating an API object.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "dryRun": {
                    "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "fieldManager": {
                    "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
                    "type": "string"
                },
                "fieldValidation": {
                    "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
            "description": "DeleteOptions may be provided when deleting an API object.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "dryRun": {
                    "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "gracePeriodSeconds": {
                    "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
                    "type": "integer",
                    "format": "int64"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "orphanDependents": {
                    "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
                    "type": "boolean"
                },
                "preconditions": {
                    "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
                },
                "propagationPolicy": {
                    "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "admission.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "admission.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "apiextensions.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "apiextensions.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "apiregistration.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "apiregistration.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "apps",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "apps",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "apps",
                    "kind": "DeleteOptions",
                    "version": "v1beta2"
                },
                {
                    "group": "authentication.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "authentication.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "authorization.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "authorization.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "autoscaling",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "autoscaling",
                    "kind": "DeleteOptions",
                    "version": "v2"
                },
                {
                    "group": "autoscaling",
                    "kind": "DeleteOptions",
                    "version": "v2beta1"
                },
                {
                    "group": "autoscaling",
                    "kind": "DeleteOptions",
                    "version": "v2beta2"
                },
                {
                    "group": "batch",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "batch",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "certificates.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "certificates.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "coordination.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "coordination.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "discovery.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "discovery.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "events.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "events.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "extensions",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "flowcontrol.apiserver.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1alpha1"
                },
                {
                    "group": "flowcontrol.apiserver.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "flowcontrol.apiserver.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta2"
                },
                {
                    "group": "imagepolicy.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1alpha1"
                },
                {
                    "group": "internal.apiserver.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1alpha1"
                },
                {
                    "group": "networking.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "networking.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "node.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "node.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1alpha1"
                },
                {
                    "group": "node.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "policy",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "policy",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1alpha1"
                },
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "scheduling.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "scheduling.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1alpha1"
                },
                {
                    "group": "scheduling.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                },
                {
                    "group": "storage.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1"
                },
                {
                    "group": "storage.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1alpha1"
                },
                {
                    "group": "storage.k8s.io",
                    "kind": "DeleteOptions",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Duration": {
            "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
            "type": "string",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
            "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map 'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item 'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list 'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
            "type": "object",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.GetOptions": {
            "description": "GetOptions is the standard query options to the standard REST get call.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "resourceVersion": {
                    "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.GroupKind": {
            "description": "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
            "type": "object",
            "required": [
                "group",
                "kind"
            ],
            "properties": {
                "group": {
                    "type": "string",
                    "default": ""
                },
                "kind": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.GroupResource": {
            "description": "GroupResource specifies a Group and a Resource, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
            "type": "object",
            "required": [
                "group",
                "resource"
            ],
            "properties": {
                "group": {
                    "type": "string",
                    "default": ""
                },
                "resource": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersion": {
            "description": "GroupVersion contains the \"group\" and the \"version\", which uniquely identifies the API.",
            "type": "object",
            "required": [
                "group",
                "version"
            ],
            "properties": {
                "group": {
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
            "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
            "type": "object",
            "required": [
                "groupVersion",
                "version"
            ],
            "properties": {
                "groupVersion": {
                    "description": "groupVersion specifies the API group and version in the form \"group/version\"",
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionKind": {
            "description": "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling",
            "type": "object",
            "required": [
                "group",
                "version",
                "kind"
            ],
            "properties": {
                "group": {
                    "type": "string",
                    "default": ""
                },
                "kind": {
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionResource": {
            "description": "GroupVersionResource unambiguously identifies a resource.  It doesn't anonymously include GroupVersion to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling",
            "type": "object",
            "required": [
                "group",
                "version",
                "resource"
            ],
            "properties": {
                "group": {
                    "type": "string",
                    "default": ""
                },
                "resource": {
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.InternalEvent": {
            "description": "InternalEvent makes watch.Event versioned",
            "type": "object",
            "required": [
                "Type",
                "Object"
            ],
            "properties": {
                "Object": {
                    "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Bookmark: the object (instance of a type being watched) where\n   only ResourceVersion field is set. On successful restart of watch from a\n   bookmark resourceVersion, client is guaranteed to not get repeat event\n   nor miss any events.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.Object"
                },
                "Type": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "type": "object",
            "required": [
                "key",
                "operator"
            ],
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string",
                    "default": ""
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string",
                    "default": ""
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.List": {
            "description": "List holds a list of objects, which may not be known by the server.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "List of objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
            "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
            "type": "object",
            "properties": {
                "continue": {
                    "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
                    "type": "string"
                },
                "remainingItemCount": {
                    "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
                    "type": "integer",
                    "format": "int64"
                },
                "resourceVersion": {
                    "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ListOptions": {
            "description": "ListOptions is the query options to a standard REST list call.",
            "type": "object",
            "properties": {
                "allowWatchBookmarks": {
                    "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
                    "type": "boolean"
                },
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "continue": {
                    "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
                    "type": "string"
                },
                "fieldSelector": {
                    "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "labelSelector": {
                    "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
                    "type": "string"
                },
                "limit": {
                    "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
                    "type": "integer",
                    "format": "int64"
                },
                "resourceVersion": {
                    "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
                    "type": "string"
                },
                "resourceVersionMatch": {
                    "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
                    "type": "string"
                },
                "sendInitialEvents": {
                    "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
                    "type": "boolean"
                },
                "timeoutSeconds": {
                    "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
                    "type": "integer",
                    "format": "int64"
                },
                "watch": {
                    "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                    "type": "string"
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
            "description": "MicroTime is version of Time with microsecond level precision.",
            "type": "string",
            "format": "date-time",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                    "type": "integer",
                    "format": "int64"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "set",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                    "type": "integer",
                    "format": "int64"
                },
                "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                    },
                    "x-kubernetes-list-map-keys": [
                        "uid"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "uid",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": "object",
            "required": [
                "apiVersion",
                "kind",
                "name",
                "uid"
            ],
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string",
                    "default": ""
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                    "type": "string",
                    "default": ""
                },
                "uid": {
                    "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-map-type": "atomic",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata": {
            "description": "PartialObjectMetadata is a generic representation of any object with ObjectMeta. It allows clients to get access to a particular ObjectMeta schema without knowing the details of the version.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList": {
            "description": "PartialObjectMetadataList contains a list of objects containing only their metadata",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "description": "items contains each of the included items.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
            "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
            "type": "object",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.PatchOptions": {
            "description": "PatchOptions may be provided when patching an API object. PatchOptions is meant to be a superset of UpdateOptions.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "dryRun": {
                    "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "fieldManager": {
                    "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
                    "type": "string"
                },
                "fieldValidation": {
                    "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
                    "type": "string"
                },
                "force": {
                    "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
            "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
            "type": "object",
            "properties": {
                "resourceVersion": {
                    "description": "Specifies the target ResourceVersion",
                    "type": "string"
                },
                "uid": {
                    "description": "Specifies the target UID.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.RootPaths": {
            "description": "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
            "type": "object",
            "required": [
                "paths"
            ],
            "properties": {
                "paths": {
                    "description": "paths are the paths available at root.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
            "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
            "type": "object",
            "required": [
                "clientCIDR",
                "serverAddress"
            ],
            "properties": {
                "clientCIDR": {
                    "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
                    "type": "string",
                    "default": ""
                },
                "serverAddress": {
                    "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
            "description": "Status is a return value for calls that don't return other objects.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "code": {
                    "description": "Suggested HTTP return code for this status, 0 if not set.",
                    "type": "integer",
                    "format": "int32"
                },
                "details": {
                    "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails",
                    "x-kubernetes-list-type": "atomic"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "message": {
                    "description": "A human-readable description of the status of this operation.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                },
                "reason": {
                    "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "Status",
                    "version": "v1"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
            "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
            "type": "object",
            "properties": {
                "field": {
                    "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
                    "type": "string"
                },
                "message": {
                    "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
                    "type": "string"
                },
                "reason": {
                    "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
            "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
            "type": "object",
            "properties": {
                "causes": {
                    "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "group": {
                    "description": "The group attribute of the resource associated with the status StatusReason.",
                    "type": "string"
                },
                "kind": {
                    "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
                    "type": "string"
                },
                "retryAfterSeconds": {
                    "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
                    "type": "integer",
                    "format": "int32"
                },
                "uid": {
                    "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Table": {
            "description": "Table is a tabular representation of a set of API resources. The server transforms the object into a set of preferred columns for quickly reviewing the objects.",
            "type": "object",
            "required": [
                "columnDefinitions",
                "rows"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "columnDefinitions": {
                    "description": "columnDefinitions describes each column in the returned items array. The number of cells per row will always match the number of column definitions.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.TableColumnDefinition"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                },
                "rows": {
                    "description": "rows is the list of items in the table.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.TableRow"
                    },
                    "x-kubernetes-list-type": "atomic"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.TableColumnDefinition": {
            "description": "TableColumnDefinition contains information about a column returned in the Table.",
            "type": "object",
            "required": [
                "name",
                "type",
                "format",
                "description",
                "priority"
            ],
            "properties": {
                "description": {
                    "description": "description is a human readable description of this column.",
                    "type": "string",
                    "default": ""
                },
                "format": {
                    "description": "format is an optional OpenAPI type modifier for this column. A format modifies the type and imposes additional rules, like date or time formatting for a string. The 'name' format is applied to the primary identifier column which has type 'string' to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "name is a human readable name for the column.",
                    "type": "string",
                    "default": ""
                },
                "priority": {
                    "description": "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a higher priority.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "type": {
                    "description": "type is an OpenAPI type definition for this column, such as number, integer, string, or array. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.TableOptions": {
            "description": "TableOptions are used when a Table is requested by the caller.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "includeObject": {
                    "description": "includeObject decides whether to include each object along with its columnar information. Specifying \"None\" will return no object, specifying \"Object\" will return the full object contents, and specifying \"Metadata\" (the default) will return the object's metadata in the PartialObjectMetadata kind in version v1beta1 of the meta.k8s.io API group.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.TableRow": {
            "description": "TableRow is an individual row in a table.",
            "type": "object",
            "required": [
                "cells"
            ],
            "properties": {
                "cells": {
                    "description": "cells will be as wide as the column definitions array and may contain strings, numbers (float64 or int64), booleans, simple maps, lists, or null. See the type field of the column definition for a more detailed description.",
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "conditions": {
                    "description": "conditions describe additional status of a row that are relevant for a human user. These conditions apply to the row, not to the object, and will be specific to table output. The only defined condition type is 'Completed', for a row that indicates a resource that has run to completion and can be given less visual priority.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.TableRowCondition"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "object": {
                    "description": "This field contains the requested additional information about each object based on the includeObject policy when requesting the Table. If \"None\", this field is empty, if \"Object\" this will be the default serialization of the object for the current API version, and if \"Metadata\" (the default) will contain the object metadata. Check the returned kind and apiVersion of the object before parsing. The media type of the object will always match the enclosing list - if this as a JSON table, these will be JSON encoded objects.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.TableRowCondition": {
            "description": "TableRowCondition allows a row to be marked with additional information.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "message": {
                    "description": "Human readable message indicating details about last transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) machine readable reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of row condition. The only defined value is 'Completed' indicating that the object this row represents has reached a completed state and may be given less visual priority than other rows. Clients are not required to honor any conditions but should be consistent where possible about handling the conditions.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "type": "string",
            "format": "date-time",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Timestamp": {
            "description": "Timestamp is a struct that is equivalent to Time, but intended for protobuf marshalling/unmarshalling. It is generated into a serialization that matches Time. Do not use in Go structs.",
            "type": "object",
            "required": [
                "seconds",
                "nanos"
            ],
            "properties": {
                "nanos": {
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "seconds": {
                    "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.TypeMeta": {
            "description": "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.UpdateOptions": {
            "description": "UpdateOptions may be provided when updating an API object. All fields in UpdateOptions should also be present in PatchOptions.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "dryRun": {
                    "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "fieldManager": {
                    "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
                    "type": "string"
                },
                "fieldValidation": {
                    "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
            "description": "Event represents a single event to a watched resource.",
            "type": "object",
            "required": [
                "type",
                "object"
            ],
            "properties": {
                "object": {
                    "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "type": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "admission.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "admission.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "admissionregistration.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "apiextensions.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "apiextensions.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "apiregistration.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "apiregistration.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "apps",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "apps",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "apps",
                    "kind": "WatchEvent",
                    "version": "v1beta2"
                },
                {
                    "group": "authentication.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "authentication.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "authorization.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "authorization.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "autoscaling",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "autoscaling",
                    "kind": "WatchEvent",
                    "version": "v2"
                },
                {
                    "group": "autoscaling",
                    "kind": "WatchEvent",
                    "version": "v2beta1"
                },
                {
                    "group": "autoscaling",
                    "kind": "WatchEvent",
                    "version": "v2beta2"
                },
                {
                    "group": "batch",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "batch",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "certificates.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "certificates.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "coordination.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "coordination.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "discovery.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "discovery.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "events.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "events.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "extensions",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "flowcontrol.apiserver.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1alpha1"
                },
                {
                    "group": "flowcontrol.apiserver.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "flowcontrol.apiserver.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta2"
                },
                {
                    "group": "imagepolicy.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1alpha1"
                },
                {
                    "group": "internal.apiserver.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1alpha1"
                },
                {
                    "group": "networking.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "networking.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "node.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "node.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1alpha1"
                },
                {
                    "group": "node.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "policy",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "policy",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1alpha1"
                },
                {
                    "group": "rbac.authorization.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "scheduling.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "scheduling.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1alpha1"
                },
                {
                    "group": "scheduling.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                },
                {
                    "group": "storage.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1"
                },
                {
                    "group": "storage.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1alpha1"
                },
                {
                    "group": "storage.k8s.io",
                    "kind": "WatchEvent",
                    "version": "v1beta1"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.runtime.RawExtension": {
            "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
            "type": "object",
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.runtime.TypeMeta": {
            "description": "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this:\n\n\ttype MyAwesomeAPIObject struct {\n\t     runtime.TypeMeta    `json:\",inline\"`\n\t     ... // other fields\n\t}\n\nfunc (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.runtime.Unknown": {
            "description": "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
            "type": "object",
            "required": [
                "ContentEncoding",
                "ContentType"
            ],
            "properties": {
                "ContentEncoding": {
                    "description": "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
                    "type": "string",
                    "default": ""
                },
                "ContentType": {
                    "description": "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
                    "type": "string",
                    "default": ""
                },
                "apiVersion": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.k8s.apimachinery.pkg.version.Info": {
            "description": "Info contains versioning information. how we'll want to distribute that information.",
            "type": "object",
            "required": [
                "major",
                "minor",
                "gitVersion",
                "gitCommit",
                "gitTreeState",
                "buildDate",
                "goVersion",
                "compiler",
                "platform"
            ],
            "properties": {
                "buildDate": {
                    "type": "string",
                    "default": ""
                },
                "compiler": {
                    "type": "string",
                    "default": ""
                },
                "gitCommit": {
                    "type": "string",
                    "default": ""
                },
                "gitTreeState": {
                    "type": "string",
                    "default": ""
                },
                "gitVersion": {
                    "type": "string",
                    "default": ""
                },
                "goVersion": {
                    "type": "string",
                    "default": ""
                },
                "major": {
                    "type": "string",
                    "default": ""
                },
                "minor": {
                    "type": "string",
                    "default": ""
                },
                "platform": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": []
        },
        "io.kruise.apps.pub.InPlaceUpdateContainerBatch": {
            "description": "InPlaceUpdateContainerBatch indicates the timestamp and containers for a batch update",
            "type": "object",
            "required": [
                "timestamp",
                "containers"
            ],
            "properties": {
                "containers": {
                    "description": "Containers is the name list of containers for this update batch",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "timestamp": {
                    "description": "Timestamp is the time for this update batch",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "InPlaceUpdateContainerBatch",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.InPlaceUpdateContainerStatus": {
            "description": "InPlaceUpdateContainerStatus records the statuses of the container that are mainly used to determine whether the InPlaceUpdate is completed.",
            "type": "object",
            "properties": {
                "imageID": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "InPlaceUpdateContainerStatus",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.InPlaceUpdatePreCheckBeforeNext": {
            "description": "InPlaceUpdatePreCheckBeforeNext contains the pre-check that must pass before the next containers can be in-place update.",
            "type": "object",
            "properties": {
                "containersRequiredReady": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "InPlaceUpdatePreCheckBeforeNext",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.InPlaceUpdateState": {
            "description": "InPlaceUpdateState records latest inplace-update state, including old statuses of containers.",
            "type": "object",
            "required": [
                "revision",
                "updateTimestamp",
                "lastContainerStatuses"
            ],
            "properties": {
                "containerBatchesRecord": {
                    "description": "ContainerBatchesRecord records the update batches that have patched in this revision.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.pub.InPlaceUpdateContainerBatch"
                    }
                },
                "lastContainerStatuses": {
                    "description": "LastContainerStatuses records the before-in-place-update container statuses. It is a map from ContainerName to InPlaceUpdateContainerStatus",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.pub.InPlaceUpdateContainerStatus"
                    }
                },
                "nextContainerImages": {
                    "description": "NextContainerImages is the containers with lower priority that waiting for in-place update images in next batch.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "nextContainerRefMetadata": {
                    "description": "NextContainerRefMetadata is the containers with lower priority that waiting for in-place update labels/annotations in next batch.",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                    }
                },
                "nextContainerResources": {
                    "description": "NextContainerResources is the containers with lower priority that waiting for in-place update resources in next batch.",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                    }
                },
                "preCheckBeforeNext": {
                    "description": "PreCheckBeforeNext is the pre-check that must pass before the next containers can be in-place update.",
                    "$ref": "#/definitions/io.kruise.apps.pub.InPlaceUpdatePreCheckBeforeNext"
                },
                "revision": {
                    "description": "Revision is the updated revision hash.",
                    "type": "string",
                    "default": ""
                },
                "updateEnvFromMetadata": {
                    "description": "UpdateEnvFromMetadata indicates there are envs from annotations/labels that should be in-place update.",
                    "type": "boolean"
                },
                "updateImages": {
                    "description": "UpdateImages indicates there are images that should be in-place update.",
                    "type": "boolean"
                },
                "updateResources": {
                    "description": "UpdateResources indicates there are resources that should be in-place update.",
                    "type": "boolean"
                },
                "updateTimestamp": {
                    "description": "UpdateTimestamp is the start time when the in-place update happens.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "InPlaceUpdateState",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.InPlaceUpdateStrategy": {
            "description": "InPlaceUpdateStrategy defines the strategies for in-place update.",
            "type": "object",
            "properties": {
                "gracePeriodSeconds": {
                    "description": "GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "InPlaceUpdateStrategy",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.Lifecycle": {
            "description": "Lifecycle contains the hooks for Pod lifecycle.",
            "type": "object",
            "properties": {
                "inPlaceUpdate": {
                    "description": "InPlaceUpdate is the hook before Pod to update and after Pod has been updated.",
                    "$ref": "#/definitions/io.kruise.apps.pub.LifecycleHook"
                },
                "preDelete": {
                    "description": "PreDelete is the hook before Pod to be deleted.",
                    "$ref": "#/definitions/io.kruise.apps.pub.LifecycleHook"
                },
                "preNormal": {
                    "description": "PreNormal is the hook after Pod to be created and ready to be Normal.",
                    "$ref": "#/definitions/io.kruise.apps.pub.LifecycleHook"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "Lifecycle",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.LifecycleHook": {
            "type": "object",
            "properties": {
                "finalizersHandler": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labelsHandler": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "markPodNotReady": {
                    "description": "MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate \u0026 PreDelete hook. Default to false.",
                    "type": "boolean"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "LifecycleHook",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.RuntimeContainerHashes": {
            "description": "RuntimeContainerHashes contains the hashes of such container.",
            "type": "object",
            "required": [
                "plainHash",
                "plainHashWithoutResources"
            ],
            "properties": {
                "extractedEnvFromMetadataHash": {
                    "description": "ExtractedEnvFromMetadataHash is the hash that calculated from pod.spec.container[x], whose envs from annotations/labels have already been extracted to the real values.",
                    "type": "integer",
                    "format": "int64"
                },
                "plainHash": {
                    "description": "PlainHash is the hash that directly calculated from pod.spec.container[x]. Usually it is calculated by Kubelet and will be in annotation of each runtime container.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "plainHashWithoutResources": {
                    "description": "PlainHashWithoutResources is the hash that directly calculated from pod.spec.container[x] over fields with Resources field zero'd out. Usually it is calculated by Kubelet and will be in annotation of each runtime container.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "RuntimeContainerHashes",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.RuntimeContainerMeta": {
            "description": "RuntimeContainerMeta contains the meta data of a runtime container.",
            "type": "object",
            "required": [
                "name",
                "containerID",
                "restartCount",
                "hashes"
            ],
            "properties": {
                "containerID": {
                    "type": "string",
                    "default": ""
                },
                "hashes": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.pub.RuntimeContainerHashes"
                },
                "name": {
                    "type": "string",
                    "default": ""
                },
                "restartCount": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "RuntimeContainerMeta",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.RuntimeContainerMetaSet": {
            "description": "RuntimeContainerMetaSet contains all the containers' meta of the Pod.",
            "type": "object",
            "required": [
                "containers"
            ],
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.pub.RuntimeContainerMeta"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "RuntimeContainerMetaSet",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.UpdatePriorityOrderTerm": {
            "description": "UpdatePriorityOrderTerm defines order priority.",
            "type": "object",
            "required": [
                "orderedKey"
            ],
            "properties": {
                "orderedKey": {
                    "description": "Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UpdatePriorityOrderTerm",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.UpdatePriorityStrategy": {
            "description": "UpdatePriorityStrategy is the strategy to define priority for pods update. Only one of orderPriority and weightPriority can be set.",
            "type": "object",
            "properties": {
                "orderPriority": {
                    "description": "Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.pub.UpdatePriorityOrderTerm"
                    }
                },
                "weightPriority": {
                    "description": "Weight priority terms, pods will be sorted by the sum of all terms weight.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.pub.UpdatePriorityWeightTerm"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UpdatePriorityStrategy",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.pub.UpdatePriorityWeightTerm": {
            "description": "UpdatePriorityWeightTerm defines weight priority.",
            "type": "object",
            "required": [
                "weight",
                "matchSelector"
            ],
            "properties": {
                "matchSelector": {
                    "description": "MatchSelector is used to select by pod's labels.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding matchExpressions, in the range 1-100.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UpdatePriorityWeightTerm",
                    "version": "pub"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.AdaptiveUnitedDeploymentStrategy": {
            "description": "AdaptiveUnitedDeploymentStrategy is used to communicate parameters when Type is AdaptiveUnitedDeploymentScheduleStrategyType.",
            "type": "object",
            "properties": {
                "rescheduleCriticalSeconds": {
                    "description": "RescheduleCriticalSeconds indicates how long controller will reschedule a schedule failed Pod to the subset that has redundant capacity after the subset where the Pod lives. If a Pod was scheduled failed and still in an unschedulabe status over RescheduleCriticalSeconds duration, the controller will reschedule it to a suitable subset. Default is 30 seconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "unschedulableLastSeconds": {
                    "description": "UnschedulableLastSeconds is used to set the number of seconds for a Subset to recover from an unschedulable state, with a default value of 300 seconds.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "AdaptiveUnitedDeploymentStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.AdaptiveWorkloadSpreadStrategy": {
            "description": "AdaptiveWorkloadSpreadStrategy is used to communicate parameters when Type is AdaptiveWorkloadSpreadScheduleStrategyType.",
            "type": "object",
            "properties": {
                "disableSimulationSchedule": {
                    "description": "DisableSimulationSchedule indicates whether to disable the feature of simulation schedule. Default is false. Webhook can take a simple general predicates to check whether Pod can be scheduled into this subset, but it just considers the Node resource and cannot replace scheduler to do richer predicates practically.",
                    "type": "boolean"
                },
                "rescheduleCriticalSeconds": {
                    "description": "RescheduleCriticalSeconds indicates how long controller will reschedule a schedule failed Pod to the subset that has redundant capacity after the subset where the Pod lives. If a Pod was scheduled failed and still in a unschedulabe status over RescheduleCriticalSeconds duration, the controller will reschedule it to a suitable subset.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "AdaptiveWorkloadSpreadStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.AdvancedCronJob": {
            "description": "AdvancedCronJob is the Schema for the advancedcronjobs API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.AdvancedCronJobSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.AdvancedCronJobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "AdvancedCronJob",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.AdvancedCronJobList": {
            "description": "AdvancedCronJobList contains a list of AdvancedCronJob",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.AdvancedCronJob"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "AdvancedCronJobList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.AdvancedCronJobSpec": {
            "description": "AdvancedCronJobSpec defines the desired state of AdvancedCronJob",
            "type": "object",
            "required": [
                "schedule",
                "template"
            ],
            "properties": {
                "concurrencyPolicy": {
                    "description": "Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one",
                    "type": "string"
                },
                "failedJobsHistoryLimit": {
                    "description": "The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Paused will pause the cron job.",
                    "type": "boolean"
                },
                "schedule": {
                    "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
                    "type": "string",
                    "default": ""
                },
                "startingDeadlineSeconds": {
                    "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
                    "type": "integer",
                    "format": "int64"
                },
                "successfulJobsHistoryLimit": {
                    "description": "The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
                    "type": "integer",
                    "format": "int32"
                },
                "template": {
                    "description": "Specifies the job that will be created when executing a CronJob.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CronJobTemplate"
                },
                "timeZone": {
                    "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kruise-controller-manager process.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "AdvancedCronJobSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.AdvancedCronJobStatus": {
            "description": "AdvancedCronJobStatus defines the observed state of AdvancedCronJob",
            "type": "object",
            "properties": {
                "active": {
                    "description": "A list of pointers to currently running jobs.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                    }
                },
                "lastScheduleTime": {
                    "description": "Information when was the last time the job was successfully scheduled.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "type": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "AdvancedCronJobStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.AdvancedStatefulSetTemplateSpec": {
            "description": "AdvancedStatefulSetTemplateSpec defines the subset template of AdvancedStatefulSet.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSetSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "AdvancedStatefulSetTemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.BroadcastJob": {
            "description": "BroadcastJob is the Schema for the broadcastjobs API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.BroadcastJobSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.BroadcastJobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "BroadcastJob",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.BroadcastJobList": {
            "description": "BroadcastJobList contains a list of BroadcastJob",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.BroadcastJob"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "BroadcastJobList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.BroadcastJobSpec": {
            "description": "BroadcastJobSpec defines the desired state of BroadcastJob",
            "type": "object",
            "required": [
                "template"
            ],
            "properties": {
                "completionPolicy": {
                    "description": "CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CompletionPolicy"
                },
                "failurePolicy": {
                    "description": "FailurePolicy indicates the behavior of the job, when failed pod is found.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.FailurePolicy"
                },
                "parallelism": {
                    "description": "Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when the work left to do is less than max parallelism. Not setting this value means no limit.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "paused": {
                    "description": "Paused will pause the job.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template describes the pod that will be created when executing a job.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "BroadcastJobSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.BroadcastJobStatus": {
            "description": "BroadcastJobStatus defines the observed state of BroadcastJob",
            "type": "object",
            "properties": {
                "active": {
                    "description": "The number of actively running pods.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "completionTime": {
                    "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "conditions": {
                    "description": "The latest available observations of an object's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.JobCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "desired": {
                    "description": "The desired number of pods, this is typically equal to the number of nodes satisfied to run pods.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "failed": {
                    "description": "The number of pods which reached phase Failed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "phase": {
                    "description": "The phase of the job.",
                    "type": "string",
                    "default": ""
                },
                "startTime": {
                    "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "succeeded": {
                    "description": "The number of pods which reached phase Succeeded.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "BroadcastJobStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.BroadcastJobTemplateSpec": {
            "description": "JobTemplateSpec describes the data a Job should have when created from a template",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Standard object's metadata of the jobs created from this template.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "description": "Specification of the desired behavior of the broadcastjob.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.BroadcastJobSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "BroadcastJobTemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSet": {
            "description": "CloneSet is the Schema for the clonesets API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSetCondition": {
            "description": "CloneSetCondition describes the state of a CloneSet at a certain point.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of CloneSet condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSetCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSetList": {
            "description": "CloneSetList contains a list of CloneSet",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSetScaleStrategy": {
            "description": "CloneSetScaleStrategy defines strategies for pods scale.",
            "type": "object",
            "properties": {
                "disablePVCReuse": {
                    "description": "Indicate if cloneSet will reuse already existed pvc to rebuild a new pod",
                    "type": "boolean"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable for scaled pods. This field can control the changes rate of replicas for CloneSet so as to minimize the impact for users' service. The scale will fail if the number of unavailable pods were greater than this MaxUnavailable at scaling up. MaxUnavailable works only when scaling up.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "podsToDelete": {
                    "description": "PodsToDelete is the names of Pod should be deleted. Note that this list will be truncated for non-existing pod names.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSetScaleStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSetSpec": {
            "description": "CloneSetSpec defines the desired state of CloneSet",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "lifecycle": {
                    "description": "Lifecycle defines the lifecycle hooks for Pods pre-available(pre-normal), pre-delete, in-place update.",
                    "$ref": "#/definitions/io.kruise.apps.pub.Lifecycle"
                },
                "minReadySeconds": {
                    "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template. If unspecified, defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "RevisionHistoryLimit is the maximum number of revisions that will be maintained in the CloneSet's revision history. The revision history consists of all revisions not represented by a currently applied CloneSetSpec version. The default value is 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "scaleStrategy": {
                    "description": "ScaleStrategy indicates the ScaleStrategy that will be employed to create and delete Pods in the CloneSet.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSetScaleStrategy"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "Template describes the pods that will be created.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "UpdateStrategy indicates the UpdateStrategy that will be employed to update Pods in the CloneSet when a revision is made to Template.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSetUpdateStrategy"
                },
                "volumeClaimTemplates": {
                    "description": "VolumeClaimTemplates is a list of claims that pods are allowed to reference. Note that PVC will be deleted when its pod has been deleted.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSetStatus": {
            "description": "CloneSetStatus defines the observed state of CloneSet",
            "type": "object",
            "required": [
                "replicas",
                "readyReplicas",
                "availableReplicas",
                "updatedReplicas",
                "updatedReadyReplicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "AvailableReplicas is the number of Pods created by the CloneSet controller that have a Ready Condition for at least minReadySeconds.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "collisionCount": {
                    "description": "CollisionCount is the count of hash collisions for the CloneSet. The CloneSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Conditions represents the latest available observations of a CloneSet's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSetCondition"
                    }
                },
                "currentRevision": {
                    "description": "currentRevision, if not empty, indicates the current revision version of the CloneSet.",
                    "type": "string"
                },
                "expectedUpdatedReplicas": {
                    "description": "ExpectedUpdatedReplicas is the number of Pods that should be updated by CloneSet controller. This field is calculated via Replicas - Partition.",
                    "type": "integer",
                    "format": "int32"
                },
                "labelSelector": {
                    "description": "LabelSelector is label selectors for query over pods that should match the replica count used by HPA.",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration is the most recent generation observed for this CloneSet. It corresponds to the CloneSet's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "ReadyReplicas is the number of Pods created by the CloneSet controller that have a Ready Condition.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "replicas": {
                    "description": "Replicas is the number of Pods created by the CloneSet controller.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updateRevision": {
                    "description": "UpdateRevision, if not empty, indicates the latest revision of the CloneSet.",
                    "type": "string"
                },
                "updatedAvailableReplicas": {
                    "description": "UpdatedAvailableReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision and have a Ready Condition for at least minReadySeconds. Notice: when enable InPlaceWorkloadVerticalScaling, pod during resource resizing will also be unavailable. This means these pod will be counted in maxUnavailable.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReadyReplicas": {
                    "description": "UpdatedReadyReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision and have a Ready Condition.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updatedReplicas": {
                    "description": "UpdatedReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSetTemplateSpec": {
            "description": "CloneSetTemplateSpec defines the subset template of CloneSet.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSetSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSetTemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CloneSetUpdateStrategy": {
            "description": "CloneSetUpdateStrategy defines strategies for pods update.",
            "type": "object",
            "properties": {
                "inPlaceUpdateStrategy": {
                    "description": "InPlaceUpdateStrategy contains strategies for in-place update.",
                    "$ref": "#/definitions/io.kruise.apps.pub.InPlaceUpdateStrategy"
                },
                "maxSurge": {
                    "description": "The maximum number of pods that can be scheduled above the desired replicas during update or specified delete. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. Defaults to 0.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during update or scale. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. When maxSurge \u003e 0, absolute number is calculated from percentage by rounding down. Defaults to 20%.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "partition": {
                    "description": "Partition is the desired number of pods in old revisions. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. It means when partition is set during pods updating, (replicas - partition value) number of pods will be updated. Default value is 0.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "paused": {
                    "description": "Paused indicates that the CloneSet is paused. Default value is false",
                    "type": "boolean"
                },
                "priorityStrategy": {
                    "description": "Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.",
                    "$ref": "#/definitions/io.kruise.apps.pub.UpdatePriorityStrategy"
                },
                "scatterStrategy": {
                    "description": "ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.UpdateScatterTerm"
                    }
                },
                "type": {
                    "description": "Type indicates the type of the CloneSetUpdateStrategy. Default is ReCreate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CloneSetUpdateStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CompletionPolicy": {
            "description": "CompletionPolicy indicates the completion policy for the job",
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.",
                    "type": "integer",
                    "format": "int64"
                },
                "ttlSecondsAfterFinished": {
                    "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. Only works for Always type",
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "description": "Type indicates the type of the CompletionPolicy. Default is Always.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CompletionPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerProbe": {
            "type": "object",
            "required": [
                "name",
                "containerName",
                "probe"
            ],
            "properties": {
                "containerName": {
                    "description": "container name",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name is podProbeMarker.Name#probe.Name",
                    "type": "string",
                    "default": ""
                },
                "probe": {
                    "description": "container probe spec",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerProbeSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerProbe",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerProbeSpec": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "integer",
                    "format": "int32"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                    "type": "integer",
                    "format": "int64"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerProbeSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerProbeState": {
            "type": "object",
            "required": [
                "name",
                "state"
            ],
            "properties": {
                "lastProbeTime": {
                    "description": "Last time we probed the condition.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "If Status=True, Message records the return result of Probe. If Status=False, Message records Probe's error message",
                    "type": "string"
                },
                "name": {
                    "description": "Name is podProbeMarker.Name#probe.Name",
                    "type": "string",
                    "default": ""
                },
                "state": {
                    "description": "container probe exec state, True or False",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerProbeState",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequest": {
            "description": "ContainerRecreateRequest is the Schema for the containerrecreaterequests API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerRecreateRequestSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerRecreateRequestStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequest",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestContainer": {
            "description": "ContainerRecreateRequestContainer defines the container that need to recreate.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name of the container that need to recreate. It must be existing in the real pod.Spec.Containers.",
                    "type": "string",
                    "default": ""
                },
                "ports": {
                    "description": "Ports is synced from the real container in Pod spec during this ContainerRecreateRequest creating. Populated by the system. Read-only.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    }
                },
                "preStop": {
                    "description": "PreStop is synced from the real container in Pod spec during this ContainerRecreateRequest creating. Populated by the system. Read-only.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ProbeHandler"
                },
                "statusContext": {
                    "description": "StatusContext is synced from the real Pod status during this ContainerRecreateRequest creating. Populated by the system. Read-only.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerRecreateRequestContainerContext"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestContainer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestContainerContext": {
            "description": "ContainerRecreateRequestContainerContext contains context status of the container that need to recreate.",
            "type": "object",
            "required": [
                "containerID",
                "restartCount"
            ],
            "properties": {
                "containerID": {
                    "description": "Container's ID in the format 'docker://\u003ccontainer_id\u003e'.",
                    "type": "string",
                    "default": ""
                },
                "restartCount": {
                    "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestContainerContext",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestContainerRecreateState": {
            "description": "ContainerRecreateRequestContainerRecreateState contains the recreation state of the container.",
            "type": "object",
            "required": [
                "name",
                "phase"
            ],
            "properties": {
                "isKilled": {
                    "description": "Containers are killed by kruise daemon",
                    "type": "boolean"
                },
                "message": {
                    "description": "A human readable message indicating details about this state.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the container.",
                    "type": "string",
                    "default": ""
                },
                "phase": {
                    "description": "Phase indicates the recreation phase of the container.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestContainerRecreateState",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestList": {
            "description": "ContainerRecreateRequestList contains a list of ContainerRecreateRequest",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerRecreateRequest"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestSpec": {
            "description": "ContainerRecreateRequestSpec defines the desired state of ContainerRecreateRequest",
            "type": "object",
            "required": [
                "podName",
                "containers"
            ],
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "ActiveDeadlineSeconds is the deadline duration of this ContainerRecreateRequest.",
                    "type": "integer",
                    "format": "int64"
                },
                "containers": {
                    "description": "Containers contains the containers that need to recreate in the Pod.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerRecreateRequestContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "podName": {
                    "description": "PodName is name of the Pod that owns the recreated containers.",
                    "type": "string",
                    "default": ""
                },
                "strategy": {
                    "description": "Strategy defines strategies for containers recreation.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerRecreateRequestStrategy"
                },
                "ttlSecondsAfterFinished": {
                    "description": "TTLSecondsAfterFinished is the TTL duration after this ContainerRecreateRequest has completed.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestStatus": {
            "description": "ContainerRecreateRequestStatus defines the observed state of ContainerRecreateRequest",
            "type": "object",
            "required": [
                "phase"
            ],
            "properties": {
                "completionTime": {
                    "description": "Represents time when the ContainerRecreateRequest was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "containerRecreateStates": {
                    "description": "ContainerRecreateStates contains the recreation states of the containers.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerRecreateRequestContainerRecreateState"
                    }
                },
                "message": {
                    "description": "A human readable message indicating details about this ContainerRecreateRequest.",
                    "type": "string"
                },
                "phase": {
                    "description": "Phase of this ContainerRecreateRequest, e.g. Pending, Recreating, Completed",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestStrategy": {
            "description": "ContainerRecreateRequestStrategy contains the strategies for containers recreation.",
            "type": "object",
            "properties": {
                "failurePolicy": {
                    "description": "FailurePolicy decides whether to continue if one container fails to recreate",
                    "type": "string"
                },
                "forceRecreate": {
                    "description": "ForceRecreate indicates whether to force kill the container even if the previous container is starting.",
                    "type": "boolean"
                },
                "minStartedSeconds": {
                    "description": "Minimum number of seconds for which a newly created container should be started and ready without any of its container crashing, for it to be considered Succeeded. Defaults to 0 (container will be considered Succeeded as soon as it is started and ready)",
                    "type": "integer",
                    "format": "int32"
                },
                "orderedRecreate": {
                    "description": "OrderedRecreate indicates whether to recreate the next container only if the previous one has recreated completely.",
                    "type": "boolean"
                },
                "terminationGracePeriodSeconds": {
                    "description": "TerminationGracePeriodSeconds is the optional duration in seconds to wait the container terminating gracefully. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, we will use pod.Spec.TerminationGracePeriodSeconds as default value.",
                    "type": "integer",
                    "format": "int64"
                },
                "unreadyGracePeriodSeconds": {
                    "description": "UnreadyGracePeriodSeconds is the optional duration in seconds to mark Pod as not ready over this duration before executing preStop hook and stopping the container.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ContainerRecreateRequestSyncContainerStatus": {
            "description": "ContainerRecreateRequestSyncContainerStatus only uses in the annotation `crr.apps.kruise.io/sync-container-statuses`.",
            "type": "object",
            "required": [
                "name",
                "ready",
                "restartCount"
            ],
            "properties": {
                "containerID": {
                    "description": "Container's ID in the format 'docker://\u003ccontainer_id\u003e'.",
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "default": ""
                },
                "ready": {
                    "description": "Specifies whether the container has passed its readiness probe.",
                    "type": "boolean",
                    "default": false
                },
                "restartCount": {
                    "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ContainerRecreateRequestSyncContainerStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.CronJobTemplate": {
            "type": "object",
            "properties": {
                "broadcastJobTemplate": {
                    "description": "Specifies the broadcastjob that will be created when executing a BroadcastCronJob.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.BroadcastJobTemplateSpec"
                },
                "jobTemplate": {
                    "description": "Specifies the job that will be created when executing a CronJob.",
                    "$ref": "#/definitions/io.k8s.api.batch.v1.JobTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "CronJobTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.DaemonSet": {
            "description": "DaemonSet is the Schema for the daemonsets API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.DaemonSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.DaemonSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "DaemonSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.DaemonSetList": {
            "description": "DaemonSetList contains a list of DaemonSet",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.DaemonSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "DaemonSetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.DaemonSetSpec": {
            "description": "DaemonSetSpec defines the desired state of DaemonSet",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "burstReplicas": {
                    "description": "BurstReplicas is a rate limiter for booting pods on a lot of pods. The default value is 250",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "lifecycle": {
                    "description": "Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update. Currently, we only support pre-delete hook for Advanced DaemonSet.",
                    "$ref": "#/definitions/io.kruise.apps.pub.Lifecycle"
                },
                "minReadySeconds": {
                    "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "An update strategy to replace existing DaemonSet pods with new pods.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.DaemonSetUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "DaemonSetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.DaemonSetStatus": {
            "description": "DaemonSetStatus defines the observed state of DaemonSet",
            "type": "object",
            "required": [
                "currentNumberScheduled",
                "numberMisscheduled",
                "desiredNumberScheduled",
                "numberReady",
                "updatedNumberScheduled",
                "daemonSetHash"
            ],
            "properties": {
                "collisionCount": {
                    "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a DaemonSet's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentNumberScheduled": {
                    "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "daemonSetHash": {
                    "description": "DaemonSetHash is the controller-revision-hash, which represents the latest version of the DaemonSet.",
                    "type": "string",
                    "default": ""
                },
                "desiredNumberScheduled": {
                    "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberAvailable": {
                    "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "numberMisscheduled": {
                    "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberReady": {
                    "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "numberUnavailable": {
                    "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "The most recent generation observed by the daemon set controller.",
                    "type": "integer",
                    "format": "int64"
                },
                "updatedNumberScheduled": {
                    "description": "The total number of nodes that are running updated daemon pod",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "DaemonSetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.DaemonSetUpdateStrategy": {
            "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.RollingUpdateDaemonSet"
                },
                "type": {
                    "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "DaemonSetUpdateStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.DeploymentTemplateSpec": {
            "description": "DeploymentTemplateSpec defines the subset template of Deployment.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "DeploymentTemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.EphemeralContainerTemplateSpec": {
            "description": "EphemeralContainerTemplateSpec describes template spec of ephemeral containers",
            "type": "object",
            "required": [
                "ephemeralContainers"
            ],
            "properties": {
                "ephemeralContainers": {
                    "description": "EphemeralContainers defines ephemeral container list in match pods.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "EphemeralContainerTemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.EphemeralJob": {
            "description": "EphemeralJob is the Schema for the ephemeraljobs API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.EphemeralJobSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.EphemeralJobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "EphemeralJob",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.EphemeralJobCondition": {
            "description": "JobCondition describes current state of a job.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastProbeTime": {
                    "description": "Last time the condition was checked.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transit from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Human readable message indicating details about last transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of job condition, Complete or Failed.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "EphemeralJobCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.EphemeralJobList": {
            "description": "EphemeralJobList contains a list of EphemeralJob",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.EphemeralJob"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "EphemeralJobList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.EphemeralJobSpec": {
            "description": "EphemeralJobSpec defines the desired state of EphemeralJob",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.",
                    "type": "integer",
                    "format": "int64"
                },
                "parallelism": {
                    "description": "Parallelism specifies the maximum desired number of pods which matches running ephemeral containers.",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Paused will pause the ephemeral job.",
                    "type": "boolean"
                },
                "replicas": {
                    "description": "Replicas indicates a part of the quantity from matched pods by selector. Usually it is used for gray scale working. if Replicas exceeded the matched number by selector or not be set, replicas will not work.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"make\" to regenerate code after modifying this file Selector is a label query over pods that should match the pod labels.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "Template describes the ephemeral container that will be created.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.EphemeralContainerTemplateSpec"
                },
                "ttlSecondsAfterFinished": {
                    "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the eJob finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, default value is 1800 If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "EphemeralJobSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.EphemeralJobStatus": {
            "description": "EphemeralJobStatus defines the observed state of EphemeralJob",
            "type": "object",
            "properties": {
                "completionTime": {
                    "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "conditions": {
                    "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.EphemeralJobCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "failed": {
                    "description": "The number of pods which reached phase Failed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "match": {
                    "description": "The number of total matched pods.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "phase": {
                    "description": "The phase of the job.",
                    "type": "string",
                    "default": ""
                },
                "running": {
                    "description": "The number of actively running pods.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "startTime": {
                    "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "succeeded": {
                    "description": "The number of pods which reached phase Succeeded.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "waiting": {
                    "description": "The number of waiting pods.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "EphemeralJobStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.FailedImageStatus": {
            "description": "FailedImageStatus the state of ImagePullJob which has the failed nodes(status.Failed\u003e0)",
            "type": "object",
            "properties": {
                "imagePullJob": {
                    "description": "The name of ImagePullJob which has the failed nodes(status.Failed\u003e0)",
                    "type": "string"
                },
                "message": {
                    "description": "The text prompt for job running status.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the image",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "FailedImageStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.FailurePolicy": {
            "description": "FailurePolicy indicates the behavior of the job, when failed pod is found.",
            "type": "object",
            "properties": {
                "restartLimit": {
                    "description": "RestartLimit specifies the number of retries before marking the pod failed.",
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "description": "Type indicates the type of FailurePolicyType. Default is FailurePolicyTypeFailFast.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "FailurePolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageListPullJob": {
            "description": "ImageListPullJob is the Schema for the imagelistpulljobs API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageListPullJobSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageListPullJobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageListPullJob",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageListPullJobList": {
            "description": "ImageListPullJobList contains a list of ImageListPullJob",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageListPullJob"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageListPullJobList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageListPullJobSpec": {
            "description": "ImageListPullJobSpec defines the desired state of ImageListPullJob",
            "type": "object",
            "required": [
                "images",
                "completionPolicy"
            ],
            "properties": {
                "completionPolicy": {
                    "description": "CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CompletionPolicy"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, IfNotPresent. Defaults to IfNotPresent.\n\nPossible enum values:\n - `\"Always\"` means that kruise-daemon always attempts to pull the latest image.\n - `\"IfNotPresent\"` means that kruise-daemon pulls if the image isn't present on disk.",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent"
                    ]
                },
                "images": {
                    "description": "Images is the image list to be pulled by the job",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "parallelism": {
                    "description": "Parallelism is the requested parallelism, it can be set to any non-negative value. If it is unspecified, it defaults to 1. If it is specified as 0, then the Job is effectively paused until it is increased.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "podSelector": {
                    "description": "PodSelector is a query over pods that should pull image on nodes of these pods. Mutually exclusive with Selector.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobPodSelector"
                },
                "pullPolicy": {
                    "description": "PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.PullPolicy"
                },
                "pullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sandboxConfig": {
                    "description": "SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SandboxConfig"
                },
                "selector": {
                    "description": "Selector is a query over nodes that should match the job. nil to match all nodes.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobNodeSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageListPullJobSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageListPullJobStatus": {
            "description": "ImageListPullJobStatus defines the observed state of ImageListPullJob",
            "type": "object",
            "required": [
                "desired"
            ],
            "properties": {
                "active": {
                    "description": "The number of running ImagePullJobs which are acknowledged by the imagepulljob controller.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "completed": {
                    "description": "The number of ImagePullJobs which are finished",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "completionTime": {
                    "description": "Represents time when the all the image pull job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "desired": {
                    "description": "The desired number of ImagePullJobs, this is typically equal to the number of len(spec.Images).",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "failedImageStatuses": {
                    "description": "The status of ImagePullJob which has the failed nodes(status.Failed\u003e0) .",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.FailedImageStatus"
                    }
                },
                "startTime": {
                    "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "succeeded": {
                    "description": "The number of image pull job which are finished and status.Succeeded==status.Desired.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageListPullJobStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImagePullJob": {
            "description": "ImagePullJob is the Schema for the imagepulljobs API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImagePullJob",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImagePullJobList": {
            "description": "ImagePullJobList contains a list of ImagePullJob",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJob"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImagePullJobList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImagePullJobNodeSelector": {
            "description": "ImagePullJobNodeSelector is a selector over nodes",
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "names": {
                    "description": "Names specify a set of nodes to execute the job.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImagePullJobNodeSelector",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImagePullJobPodSelector": {
            "description": "ImagePullJobPodSelector is a selector over pods",
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImagePullJobPodSelector",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImagePullJobSpec": {
            "description": "ImagePullJobSpec defines the desired state of ImagePullJob",
            "type": "object",
            "required": [
                "image",
                "completionPolicy"
            ],
            "properties": {
                "completionPolicy": {
                    "description": "CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CompletionPolicy"
                },
                "image": {
                    "description": "Image is the image to be pulled by the job",
                    "type": "string",
                    "default": ""
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, IfNotPresent. Defaults to IfNotPresent.\n\nPossible enum values:\n - `\"Always\"` means that kruise-daemon always attempts to pull the latest image.\n - `\"IfNotPresent\"` means that kruise-daemon pulls if the image isn't present on disk.",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent"
                    ]
                },
                "parallelism": {
                    "description": "Parallelism is the requested parallelism, it can be set to any non-negative value. If it is unspecified, it defaults to 1. If it is specified as 0, then the Job is effectively paused until it is increased.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "podSelector": {
                    "description": "PodSelector is a query over pods that should pull image on nodes of these pods. Mutually exclusive with Selector.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobPodSelector"
                },
                "pullPolicy": {
                    "description": "PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.PullPolicy"
                },
                "pullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sandboxConfig": {
                    "description": "SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SandboxConfig"
                },
                "selector": {
                    "description": "Selector is a query over nodes that should match the job. nil to match all nodes.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobNodeSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImagePullJobSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImagePullJobStatus": {
            "description": "ImagePullJobStatus defines the observed state of ImagePullJob",
            "type": "object",
            "required": [
                "desired"
            ],
            "properties": {
                "active": {
                    "description": "The number of actively running pulling tasks.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "completionTime": {
                    "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "desired": {
                    "description": "The desired number of pulling tasks, this is typically equal to the number of nodes satisfied.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "failed": {
                    "description": "The number of pulling tasks  which reached phase Failed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "failedNodes": {
                    "description": "The nodes that failed to pull the image.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "message": {
                    "description": "The text prompt for job running status.",
                    "type": "string"
                },
                "startTime": {
                    "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "succeeded": {
                    "description": "The number of pulling tasks which reached phase Succeeded.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImagePullJobStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImagePullJobTemplate": {
            "type": "object",
            "required": [
                "completionPolicy"
            ],
            "properties": {
                "completionPolicy": {
                    "description": "CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CompletionPolicy"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, IfNotPresent. Defaults to IfNotPresent.\n\nPossible enum values:\n - `\"Always\"` means that kruise-daemon always attempts to pull the latest image.\n - `\"IfNotPresent\"` means that kruise-daemon pulls if the image isn't present on disk.",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent"
                    ]
                },
                "parallelism": {
                    "description": "Parallelism is the requested parallelism, it can be set to any non-negative value. If it is unspecified, it defaults to 1. If it is specified as 0, then the Job is effectively paused until it is increased.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "podSelector": {
                    "description": "PodSelector is a query over pods that should pull image on nodes of these pods. Mutually exclusive with Selector.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobPodSelector"
                },
                "pullPolicy": {
                    "description": "PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.PullPolicy"
                },
                "pullSecrets": {
                    "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sandboxConfig": {
                    "description": "SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SandboxConfig"
                },
                "selector": {
                    "description": "Selector is a query over nodes that should match the job. nil to match all nodes.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImagePullJobNodeSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImagePullJobTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageSpec": {
            "description": "ImageSpec defines the pulling spec of an image",
            "type": "object",
            "required": [
                "tags"
            ],
            "properties": {
                "pullSecrets": {
                    "description": "PullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ReferenceObject"
                    }
                },
                "sandboxConfig": {
                    "description": "SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SandboxConfig"
                },
                "tags": {
                    "description": "Tags is a list of versions of this image",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageTagSpec"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageStatus": {
            "description": "ImageStatus defines the pulling status of an image",
            "type": "object",
            "required": [
                "tags"
            ],
            "properties": {
                "tags": {
                    "description": "Represents statuses of pulling tasks on this node",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageTagStatus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageTagPullPolicy": {
            "description": "ImageTagPullPolicy defines the policy of the pulling task",
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "description": "ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the task may be active before the system tries to terminate it; value must be positive integer. if not specified, the system will never terminate it.",
                    "type": "integer",
                    "format": "int64"
                },
                "backoffLimit": {
                    "description": "Specifies the number of retries before marking the pulling task failed. Defaults to 3",
                    "type": "integer",
                    "format": "int32"
                },
                "timeoutSeconds": {
                    "description": "Specifies the timeout of the pulling task. Defaults to 600",
                    "type": "integer",
                    "format": "int32"
                },
                "ttlSecondsAfterFinished": {
                    "description": "TTLSecondsAfterFinished limits the lifetime of a pulling task that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the task finishes, it is eligible to be automatically deleted. If this field is unset, the task won't be automatically deleted. If this field is set to zero, the task becomes eligible to be deleted immediately after it finishes.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageTagPullPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageTagSpec": {
            "description": "ImageTagSpec defines the pulling spec of an image tag",
            "type": "object",
            "required": [
                "tag"
            ],
            "properties": {
                "createdAt": {
                    "description": "Specifies the create time of this tag",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, IfNotPresent. Defaults to IfNotPresent.\n\nPossible enum values:\n - `\"Always\"` means that kruise-daemon always attempts to pull the latest image.\n - `\"IfNotPresent\"` means that kruise-daemon pulls if the image isn't present on disk.",
                    "type": "string",
                    "enum": [
                        "Always",
                        "IfNotPresent"
                    ]
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If this image is managed by a controller, then an entry in this list will point to this controller.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
                    }
                },
                "pullPolicy": {
                    "description": "PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageTagPullPolicy"
                },
                "tag": {
                    "description": "Specifies the image tag",
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "description": "An opaque value that represents the internal version of this tag that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and .",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageTagSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ImageTagStatus": {
            "description": "ImageTagStatus defines the pulling status of an image tag",
            "type": "object",
            "required": [
                "tag",
                "phase"
            ],
            "properties": {
                "completionTime": {
                    "description": "Represents time when the pulling task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "imageID": {
                    "description": "Represents the ID of this image.",
                    "type": "string"
                },
                "message": {
                    "description": "Represents the summary information of this node",
                    "type": "string"
                },
                "phase": {
                    "description": "Represents the image pulling task phase.",
                    "type": "string",
                    "default": ""
                },
                "progress": {
                    "description": "Represents the pulling progress of this tag, which is between 0-100. There is no guarantee of monotonic consistency, and it may be a rollback due to retry during pulling.",
                    "type": "integer",
                    "format": "int32"
                },
                "startTime": {
                    "description": "Represents time when the pulling task was acknowledged by the image puller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "tag": {
                    "description": "Represents the image tag.",
                    "type": "string",
                    "default": ""
                },
                "version": {
                    "description": "Represents the internal version of this tag that the daemon handled.",
                    "type": "integer",
                    "format": "int64"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ImageTagStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.JobCondition": {
            "description": "JobCondition describes current state of a job.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastProbeTime": {
                    "description": "Last time the condition was checked.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "lastTransitionTime": {
                    "description": "Last time the condition transit from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "Human readable message indicating details about last transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of job condition, Complete or Failed.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "JobCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ManualUpdate": {
            "description": "ManualUpdate is a update strategy which allows users to control the update progress by providing the partition of each subset.",
            "type": "object",
            "properties": {
                "partitions": {
                    "description": "Indicates number of subset partition.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ManualUpdate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodeImage": {
            "description": "NodeImage is the Schema for the nodeimages API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodeImageSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodeImageStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodeImage",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodeImageList": {
            "description": "NodeImageList contains a list of NodeImage",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodeImage"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodeImageList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodeImageSpec": {
            "description": "NodeImageSpec defines the desired state of NodeImage",
            "type": "object",
            "properties": {
                "images": {
                    "description": "Specifies images to be pulled on this node It can not be more than 256 for each NodeImage",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageSpec"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodeImageSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodeImageStatus": {
            "description": "NodeImageStatus defines the observed state of NodeImage",
            "type": "object",
            "required": [
                "desired"
            ],
            "properties": {
                "desired": {
                    "description": "The desired number of pulling tasks, this is typically equal to the number of images in spec.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "failed": {
                    "description": "The number of pulling tasks  which reached phase Failed.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "firstSyncStatus": {
                    "description": "The first of all job has finished on this node. When a node is added to the cluster, we want to know the time when the node's image pulling is completed, and use it to trigger the operation of the upper system.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SyncStatus"
                },
                "imageStatuses": {
                    "description": "all statuses of active image pulling tasks",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ImageStatus"
                    }
                },
                "pulling": {
                    "description": "The number of pulling tasks which are not finished.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "succeeded": {
                    "description": "The number of pulling tasks which reached phase Succeeded.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodeImageStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodePodProbe": {
            "description": "NodePodProbe is the Schema for the NodePodProbe API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodePodProbeSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodePodProbeStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodePodProbe",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodePodProbeList": {
            "description": "NodePodProbeList contains a list of NodePodProbe",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodePodProbe"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodePodProbeList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodePodProbeSpec": {
            "description": "NodePodProbeSpec defines the desired state of NodePodProbe",
            "type": "object",
            "properties": {
                "podProbes": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PodProbe"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodePodProbeSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodePodProbeStatus": {
            "type": "object",
            "properties": {
                "podProbeStatuses": {
                    "description": "pod probe results",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PodProbeStatus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodePodProbeStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.NodeTopologyTerm": {
            "type": "object",
            "required": [
                "nodeTopologyKeys"
            ],
            "properties": {
                "nodeTopologyKeys": {
                    "description": "A list of node selector requirements by node's labels.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "NodeTopologyTerm",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PersistentPodAnnotation": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PersistentPodAnnotation",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PersistentPodState": {
            "description": "PersistentPodState is the Schema for the PersistentPodState API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.PersistentPodStateSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.PersistentPodStateStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PersistentPodState",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PersistentPodStateList": {
            "description": "PersistentPodStateList contains a list of PersistentPodState",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PersistentPodState"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PersistentPodStateList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PersistentPodStateSpec": {
            "description": "PersistentPodStateSpec defines the desired state of PersistentPodState",
            "type": "object",
            "required": [
                "targetRef"
            ],
            "properties": {
                "persistentPodAnnotations": {
                    "description": "Persist the annotations information of the pods that need to be saved",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PersistentPodAnnotation"
                    }
                },
                "persistentPodStateRetentionPolicy": {
                    "description": "PersistentPodStateRetentionPolicy describes the policy used for PodState. The default policy of 'WhenScaled' causes when scale down statefulSet, deleting it.",
                    "type": "string"
                },
                "preferredPersistentTopology": {
                    "description": "Pod rebuilt topology preferred for node labels, with xx weight for example  kubernetes.io/hostname, failure-domain.beta.kubernetes.io/zone",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PreferredTopologyTerm"
                    }
                },
                "requiredPersistentTopology": {
                    "description": "Pod rebuilt topology required for node labels for example kubernetes.io/hostname, failure-domain.beta.kubernetes.io/zone",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodeTopologyTerm"
                },
                "targetRef": {
                    "description": "TargetReference contains enough information to let you identify an workload for PersistentPodState Selector and TargetReference are mutually exclusive, TargetReference is priority to take effect current only support StatefulSet",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.TargetReference"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PersistentPodStateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PersistentPodStateStatus": {
            "type": "object",
            "required": [
                "observedGeneration"
            ],
            "properties": {
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this PersistentPodState. It corresponds to the PersistentPodState's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "podStates": {
                    "description": "When the pod is ready, record some status information of the pod, such as: labels, annotations, topologies, etc. map[string]PodState -\u003e map[Pod.Name]PodState",
                    "type": "object",
                    "additionalProperties": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PodState"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PersistentPodStateStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodContainerProbe": {
            "type": "object",
            "required": [
                "name",
                "containerName",
                "probe"
            ],
            "properties": {
                "containerName": {
                    "description": "container name",
                    "type": "string",
                    "default": ""
                },
                "markerPolicy": {
                    "description": "According to the execution result of ContainerProbe, perform specific actions, such as: patch Pod labels, annotations, ReadinessGate Condition It cannot be null at the same time as PodConditionType.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ProbeMarkerPolicy"
                    },
                    "x-kubernetes-patch-merge-key": "state",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "name": {
                    "description": "probe name, unique within the Pod(Even between different containers, they cannot be the same)",
                    "type": "string",
                    "default": ""
                },
                "podConditionType": {
                    "description": "If it is not empty, the Probe execution result will be recorded on the Pod condition. It cannot be null at the same time as MarkerPolicy. For example PodConditionType=game.kruise.io/healthy, pod.status.condition.type = game.kruise.io/healthy. When probe is Succeeded, pod.status.condition.status = True. Otherwise, when the probe fails to execute, pod.status.condition.status = False.",
                    "type": "string"
                },
                "probe": {
                    "description": "container probe spec",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerProbeSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodContainerProbe",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodProbe": {
            "type": "object",
            "required": [
                "name",
                "namespace",
                "uid",
                "IP"
            ],
            "properties": {
                "IP": {
                    "description": "pod ip",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "pod name",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "pod namespace",
                    "type": "string",
                    "default": ""
                },
                "probes": {
                    "description": "Custom container probe, supports Exec, Tcp, and returns the result to Pod yaml",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerProbe"
                    }
                },
                "uid": {
                    "description": "pod uid",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodProbe",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodProbeMarker": {
            "description": "PodProbeMarker is the Schema for the PodProbeMarker API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.PodProbeMarkerSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.PodProbeMarkerStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodProbeMarker",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodProbeMarkerList": {
            "description": "PodProbeMarkerList contains a list of PodProbeMarker",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PodProbeMarker"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodProbeMarkerList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodProbeMarkerSpec": {
            "description": "PodProbeMarkerSpec defines the desired state of PodProbeMarker",
            "type": "object",
            "required": [
                "selector",
                "probes"
            ],
            "properties": {
                "probes": {
                    "description": "Custom container probe, current only support Exec(). Probe Result will record in Pod.Status.Conditions, and condition.type=probe.name. condition.status=True indicates probe success condition.status=False indicates probe fails",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.PodContainerProbe"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should exec custom probe It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodProbeMarkerSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodProbeMarkerStatus": {
            "type": "object",
            "required": [
                "observedGeneration"
            ],
            "properties": {
                "matchedPods": {
                    "description": "matched Pods",
                    "type": "integer",
                    "format": "int64"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this PodProbeMarker. It corresponds to the PodProbeMarker's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodProbeMarkerStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodProbeStatus": {
            "type": "object",
            "required": [
                "name",
                "namespace",
                "uid"
            ],
            "properties": {
                "name": {
                    "description": "pod name",
                    "type": "string",
                    "default": ""
                },
                "namespace": {
                    "description": "pod namespace",
                    "type": "string",
                    "default": ""
                },
                "probeStates": {
                    "description": "pod probe result",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ContainerProbeState"
                    }
                },
                "uid": {
                    "description": "pod uid",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodProbeStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PodState": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "pod persistent annotations",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "nodeName": {
                    "description": "pod.spec.nodeName",
                    "type": "string"
                },
                "nodeTopologyLabels": {
                    "description": "node topology labels key=value for example kubernetes.io/hostname=node-1",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PodState",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PreferredTopologyTerm": {
            "type": "object",
            "required": [
                "weight",
                "preference"
            ],
            "properties": {
                "preference": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.NodeTopologyTerm"
                },
                "weight": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PreferredTopologyTerm",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ProbeHandler": {
            "description": "ProbeHandler defines a specific action that should be taken",
            "type": "object",
            "properties": {
                "exec": {
                    "description": "One and only one of the following should be specified. Exec specifies the action to take.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
                    "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ProbeHandler",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ProbeMarkerPolicy": {
            "type": "object",
            "required": [
                "state"
            ],
            "properties": {
                "annotations": {
                    "description": "Patch annotations pod.annotations",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "description": "Patch Labels pod.labels",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "state": {
                    "description": "probe status, True or False For example: State=Succeeded, annotations[controller.kubernetes.io/pod-deletion-cost] = '10'. State=Failed, annotations[controller.kubernetes.io/pod-deletion-cost] = '-10'. In addition, if State=Failed is not defined, Exec execution fails, and the annotations[controller.kubernetes.io/pod-deletion-cost] will be Deleted",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ProbeMarkerPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.PullPolicy": {
            "description": "PullPolicy defines the policy of the pulling task",
            "type": "object",
            "properties": {
                "backoffLimit": {
                    "description": "Specifies the number of retries before marking the pulling task failed. Defaults to 3",
                    "type": "integer",
                    "format": "int32"
                },
                "timeoutSeconds": {
                    "description": "Specifies the timeout of the pulling task. Defaults to 600",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "PullPolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ReferenceObject": {
            "description": "ReferenceObject comprises a resource name, with a mandatory namespace, rendered as \"\u003cnamespace\u003e/\u003cname\u003e\".",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ReferenceObject",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistribution": {
            "description": "ResourceDistribution is the Schema for the resourcedistributions API.",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistributionSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistributionStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistribution",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistributionCondition": {
            "description": "ResourceDistributionCondition allows a row to be marked with additional information.",
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "failedNamespace": {
                    "description": "FailedNamespaces describe all failed namespaces when Status is False",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "reason": {
                    "description": "Reason describe human readable message indicating details about last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of ResourceDistributionCondition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistributionCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistributionList": {
            "description": "ResourceDistributionList contains a list of ResourceDistribution.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistribution"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistributionList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistributionNamespace": {
            "description": "ResourceDistributionNamespace contains a namespace name",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Namespace name",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistributionNamespace",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistributionSpec": {
            "description": "ResourceDistributionSpec defines the desired state of ResourceDistribution.",
            "type": "object",
            "required": [
                "resource",
                "targets"
            ],
            "properties": {
                "resource": {
                    "description": "Resource must be the complete yaml that users want to distribute.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "targets": {
                    "description": "Targets defines the namespaces that users want to distribute to.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistributionTargets"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistributionSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistributionStatus": {
            "description": "ResourceDistributionStatus defines the observed state of ResourceDistribution. ResourceDistributionStatus is recorded by kruise, users' modification is invalid and meaningless.",
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions describe the condition when Resource creating, updating and deleting.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistributionCondition"
                    }
                },
                "desired": {
                    "description": "Desired represents the number of total target namespaces.",
                    "type": "integer",
                    "format": "int32"
                },
                "failed": {
                    "description": "Failed represents the number of failed distributions.",
                    "type": "integer",
                    "format": "int32"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration represents the .metadata.generation that the condition was set based upon.",
                    "type": "integer",
                    "format": "int64"
                },
                "succeeded": {
                    "description": "Succeeded represents the number of successful distributions.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistributionStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistributionTargetNamespaces": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistributionNamespace"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistributionTargetNamespaces",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ResourceDistributionTargets": {
            "description": "ResourceDistributionTargets defines the targets of Resource. Four options are provided to select target namespaces.",
            "type": "object",
            "properties": {
                "allNamespaces": {
                    "description": "If AllNamespaces is true, Resource will be distributed to the all namespaces (except some forbidden namespaces, such as \"kube-system\" and \"kube-public\").",
                    "type": "boolean"
                },
                "excludedNamespaces": {
                    "description": "If ExcludedNamespaces is not empty, Resource will never be distributed to the listed namespaces. ExcludedNamespaces has the highest priority.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistributionTargetNamespaces"
                },
                "includedNamespaces": {
                    "description": "If IncludedNamespaces is not empty, Resource will be distributed to the listed namespaces.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ResourceDistributionTargetNamespaces"
                },
                "namespaceLabelSelector": {
                    "description": "If NamespaceLabelSelector is not empty, Resource will be distributed to the matched namespaces.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ResourceDistributionTargets",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.RollingUpdateDaemonSet": {
            "description": "Spec to control the desired behavior of daemon set rolling update.",
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediately created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "maxUnavailable": {
                    "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "partition": {
                    "description": "The number of DaemonSet pods remained to be old version. Default value is 0. Maximum value is status.DesiredNumberScheduled, which means no pod will be updated.",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Indicates that the daemon set is paused and will not be processed by the daemon set controller.",
                    "type": "boolean"
                },
                "rollingUpdateType": {
                    "description": "Type is to specify which kind of rollingUpdate.",
                    "type": "string"
                },
                "selector": {
                    "description": "A label query over nodes that are managed by the daemon set RollingUpdate. Must match in order to be controlled. It must match the node's labels.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "RollingUpdateDaemonSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.RollingUpdateStatefulSetStrategy": {
            "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
            "type": "object",
            "properties": {
                "inPlaceUpdateStrategy": {
                    "description": "InPlaceUpdateStrategy contains strategies for in-place update.",
                    "$ref": "#/definitions/io.kruise.apps.pub.InPlaceUpdateStrategy"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy. Defaults to 1.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "minReadySeconds": {
                    "description": "MinReadySeconds indicates how long will the pod be considered ready after it's updated. MinReadySeconds works with both OrderedReady and Parallel podManagementPolicy. It affects the pod scale up speed when the podManagementPolicy is set to be OrderedReady. Combined with MaxUnavailable, it affects the pod update speed regardless of podManagementPolicy. Default value is 0, max is 300.",
                    "type": "integer",
                    "format": "int32"
                },
                "partition": {
                    "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned by default. But if unorderedUpdate has been set:\n  - Partition indicates the number of pods with non-updated revisions when rolling update.\n  - It means controller will update $(replicas - partition) number of pod.\nDefault value is 0.",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Paused indicates that the StatefulSet is paused. Default value is false",
                    "type": "boolean"
                },
                "podUpdatePolicy": {
                    "description": "PodUpdatePolicy indicates how pods should be updated Default value is \"ReCreate\"",
                    "type": "string"
                },
                "unorderedUpdate": {
                    "description": "UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnorderedUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "RollingUpdateStatefulSetStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SandboxConfig": {
            "description": "SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs",
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SandboxConfig",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.ShareVolumePolicy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "ShareVolumePolicy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarContainer": {
            "description": "SidecarContainer defines the container of Sidecar",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "x-kubernetes-list-map-keys": [
                        "name"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "image": {
                    "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
                },
                "livenessProbe": {
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string",
                    "default": ""
                },
                "podInjectPolicy": {
                    "description": "The rules that injected SidecarContainer into Pod.spec.containers, not takes effect in initContainers If BeforeAppContainer, the SidecarContainer will be injected in front of the pod.spec.containers otherwise it will be injected into the back. default BeforeAppContainerType",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "resizePolicy": {
                    "description": "Resources resize policy for the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
                    },
                    "x-kubernetes-list-type": "atomic"
                },
                "resources": {
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "restartPolicy": {
                    "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
                },
                "shareVolumePolicy": {
                    "description": "If ShareVolumePolicy is enabled, the sidecar container will share the other container's VolumeMounts in the pod(don't contains the injected sidecar container).",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ShareVolumePolicy"
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                },
                "transferEnv": {
                    "description": "TransferEnv will transfer env info from other container SourceContainerName is pod.spec.container[x].name; EnvName is pod.spec.container[x].Env.name",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.TransferEnvVar"
                    }
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "upgradeStrategy": {
                    "description": "sidecarContainer upgrade strategy, include: ColdUpgrade, HotUpgrade",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarContainerUpgradeStrategy"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "x-kubernetes-list-map-keys": [
                        "devicePath"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "x-kubernetes-list-map-keys": [
                        "mountPath"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarContainer",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarContainerUpgradeStrategy": {
            "type": "object",
            "properties": {
                "hotUpgradeEmptyImage": {
                    "description": "when HotUpgrade, HotUpgradeEmptyImage is used to complete the hot upgrading process HotUpgradeEmptyImage is consistent of sidecar container in Command, Args, Liveness probe, etc. but it does no actual work.",
                    "type": "string"
                },
                "upgradeType": {
                    "description": "when sidecar container is stateless, use ColdUpgrade otherwise HotUpgrade are more HotUpgrade. examples for istio envoy container is suitable for HotUpgrade default is ColdUpgrade",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarContainerUpgradeStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSet": {
            "description": "SidecarSet is the Schema for the sidecarsets API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSetInjectRevision": {
            "type": "object",
            "properties": {
                "customVersion": {
                    "description": "CustomVersion corresponds to label 'apps.kruise.io/sidecarset-custom-version' of (History) SidecarSet. SidecarSet will select the specific ControllerRevision via this CustomVersion, and then restore the history SidecarSet to inject specific version of the sidecar to pods.",
                    "type": "string"
                },
                "policy": {
                    "description": "Policy describes the behavior of revision injection.",
                    "type": "string"
                },
                "revisionName": {
                    "description": "RevisionName corresponds to a specific ControllerRevision name of SidecarSet that you want to inject to Pods.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSetInjectRevision",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSetInjectionStrategy": {
            "description": "SidecarSetInjectionStrategy indicates the injection strategy of SidecarSet.",
            "type": "object",
            "properties": {
                "paused": {
                    "description": "Paused indicates that SidecarSet will suspend injection into Pods If Paused is true, the sidecarSet will not be injected to newly created Pods, but the injected sidecar container remains updating and running. default is false",
                    "type": "boolean"
                },
                "revision": {
                    "description": "Revision can help users rolling update SidecarSet safely. If users set this filed, SidecarSet will try to inject specific revision according to different policies.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarSetInjectRevision"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSetInjectionStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSetList": {
            "description": "SidecarSetList contains a list of SidecarSet",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSetPatchPodMetadata": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "annotations",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string",
                        "default": ""
                    }
                },
                "patchPolicy": {
                    "description": "labels map[string]string `json:\"labels,omitempty\"` patch pod metadata policy, Default is \"Retain\"",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSetPatchPodMetadata",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSetSpec": {
            "description": "SidecarSetSpec defines the desired state of SidecarSet",
            "type": "object",
            "properties": {
                "containers": {
                    "description": "Containers is the list of sidecar containers to be injected into the selected pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "imagePullSecrets": {
                    "description": "List of the names of secrets required by pulling sidecar container images",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "initContainers": {
                    "description": "InitContainers is the list of init containers to be injected into the selected pod We will inject those containers by their name in ascending order We only inject init containers when a new pod is created, it does not apply to any existing pod",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarContainer"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "injectionStrategy": {
                    "description": "InjectionStrategy describe the strategy when sidecarset is injected into pods",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarSetInjectionStrategy"
                },
                "namespace": {
                    "description": "Namespace sidecarSet will only match the pods in the namespace otherwise, match pods in all namespaces(in cluster)",
                    "type": "string"
                },
                "namespaceSelector": {
                    "description": "NamespaceSelector select which namespaces to inject sidecar containers. Default to the empty LabelSelector, which matches everything.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "patchPodMetadata": {
                    "description": "SidecarSet support to inject \u0026 in-place update metadata in pod.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarSetPatchPodMetadata"
                    }
                },
                "revisionHistoryLimit": {
                    "description": "RevisionHistoryLimit indicates the maximum quantity of stored revisions about the SidecarSet. default value is 10",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "selector is a label query over pods that should be injected",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "updateStrategy": {
                    "description": "The sidecarset updateStrategy to use to replace existing pods with new ones.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SidecarSetUpdateStrategy"
                },
                "volumes": {
                    "description": "List of volumes that can be mounted by sidecar containers",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSetStatus": {
            "description": "SidecarSetStatus defines the observed state of SidecarSet",
            "type": "object",
            "required": [
                "matchedPods",
                "updatedPods",
                "readyPods"
            ],
            "properties": {
                "collisionCount": {
                    "description": "CollisionCount is the count of hash collisions for the SidecarSet. The SidecarSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "latestRevision": {
                    "description": "LatestRevision, if not empty, indicates the latest controllerRevision name of the SidecarSet.",
                    "type": "string"
                },
                "matchedPods": {
                    "description": "matchedPods is the number of Pods whose labels are matched with this SidecarSet's selector and are created after sidecarset creates",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this SidecarSet. It corresponds to the SidecarSet's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyPods": {
                    "description": "readyPods is the number of matched Pods that have a ready condition",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updatedPods": {
                    "description": "updatedPods is the number of matched Pods that are injected with the latest SidecarSet's containers",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updatedReadyPods": {
                    "description": "updatedReadyPods is the number of matched pods that updated and ready",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SidecarSetUpdateStrategy": {
            "description": "SidecarSetUpdateStrategy indicates the strategy that the SidecarSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "The maximum number of SidecarSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of SidecarSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "partition": {
                    "description": "Partition is the desired number of pods in old revisions. It means when partition is set during pods updating, (replicas - partition) number of pods will be updated. Default value is 0.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "paused": {
                    "description": "Paused indicates that the SidecarSet is paused to update the injected pods, For the impact on the injection behavior for newly created Pods, please refer to the comments of Selector.",
                    "type": "boolean"
                },
                "priorityStrategy": {
                    "description": "Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.",
                    "$ref": "#/definitions/io.kruise.apps.pub.UpdatePriorityStrategy"
                },
                "scatterStrategy": {
                    "description": "ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.UpdateScatterTerm"
                    }
                },
                "selector": {
                    "description": "If selector is not nil, this upgrade will only update the selected pods.\n\nStarting from Kruise 1.8.0, the updateStrategy.Selector affects the version of the Sidecar container injected into newly created Pods by a SidecarSet configured with an injectionStrategy. In most cases, all newly created Pods are injected with the specified Sidecar version as configured in injectionStrategy.revision, which is consistent with previous versions.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "type": {
                    "description": "Type is NotUpdate, the SidecarSet don't update the injected pods, it will only inject sidecar container into the newly created pods. Type is RollingUpdate, the SidecarSet will update the injected pods to the latest version on RollingUpdate Strategy. default is RollingUpdate",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SidecarSetUpdateStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SourceContainerNameSource": {
            "type": "object",
            "properties": {
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SourceContainerNameSource",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.StatefulSet": {
            "description": "StatefulSet is the Schema for the statefulsets API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.StatefulSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.StatefulSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSet",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.StatefulSetList": {
            "description": "StatefulSetList contains a list of StatefulSet",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.StatefulSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.StatefulSetSpec": {
            "description": "StatefulSetSpec defines the desired state of StatefulSet",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "podManagementPolicy": {
                    "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
                    "type": "string"
                },
                "replicas": {
                    "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "serviceName": {
                    "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
                    "type": "string"
                },
                "template": {
                    "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.StatefulSetUpdateStrategy"
                },
                "volumeClaimTemplates": {
                    "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.StatefulSetStatus": {
            "description": "StatefulSetStatus defines the observed state of StatefulSet",
            "type": "object",
            "required": [
                "replicas",
                "readyReplicas",
                "availableReplicas",
                "currentReplicas",
                "updatedReplicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "AvailableReplicas is the number of Pods created by the StatefulSet controller that have been ready for minReadySeconds.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "collisionCount": {
                    "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a statefulset's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentReplicas": {
                    "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "currentRevision": {
                    "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
                    "type": "string"
                },
                "labelSelector": {
                    "description": "LabelSelector is label selectors for query over pods that should match the replica count used by HPA.",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "replicas": {
                    "description": "replicas is the number of Pods created by the StatefulSet controller.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updateRevision": {
                    "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
                    "type": "string"
                },
                "updatedReplicas": {
                    "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.StatefulSetTemplateSpec": {
            "description": "StatefulSetTemplateSpec defines the subset template of StatefulSet.",
            "type": "object",
            "required": [
                "spec"
            ],
            "properties": {
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetTemplateSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.StatefulSetUpdateStrategy": {
            "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.RollingUpdateStatefulSetStrategy"
                },
                "type": {
                    "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetUpdateStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.Subset": {
            "description": "Subset defines the detail of a subset.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "maxReplicas": {
                    "description": "Indicates the upper bounded replicas of the subset. MaxReplicas must be more than or equal to MinReplicas. MaxReplicas == nil means no limitation. Please ensure that at least one subset has empty MaxReplicas(no limitation) to avoid stuck scaling. Defaults to nil.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "minReplicas": {
                    "description": "Indicates the lower bounded replicas of the subset. MinReplicas must be more than or equal to 0 if it is set. Controller will prioritize satisfy minReplicas for each subset according to the order of Topology.Subsets. Defaults to 0.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "name": {
                    "description": "Indicates subset name as a DNS_LABEL, which will be used to generate subset workload name prefix in the format '\u003cdeployment-name\u003e-\u003csubset-name\u003e-'. Name should be unique between all of the subsets under one UnitedDeployment.",
                    "type": "string",
                    "default": ""
                },
                "nodeSelectorTerm": {
                    "description": "Indicates the node selector to form the subset. Depending on the node selector, pods provisioned could be distributed across multiple groups of nodes. A subset's nodeSelectorTerm is not allowed to be updated.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
                },
                "patch": {
                    "description": "Patch indicates patching to the templateSpec. Patch takes precedence over other fields If the Patch also modifies the Replicas, NodeSelectorTerm or Tolerations, use value in the Patch",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "replicas": {
                    "description": "Indicates the number of the pod to be created under this subset. Replicas could also be percentage like '10%', which means 10% of UnitedDeployment replicas of pods will be distributed under this subset. If nil, the number of replicas in this subset is determined by controller. Controller will try to keep all the subsets with nil replicas have average pods. Replicas and MinReplicas/MaxReplicas are mutually exclusive in a UnitedDeployment.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "tolerations": {
                    "description": "Indicates the tolerations the pods under this subset have. A subset's tolerations is not allowed to be updated.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "Subset",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SubsetTemplate": {
            "description": "SubsetTemplate defines the subset template under the UnitedDeployment. UnitedDeployment will provision every subset based on one workload templates in SubsetTemplate.",
            "type": "object",
            "properties": {
                "advancedStatefulSetTemplate": {
                    "description": "AdvancedStatefulSet template",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.AdvancedStatefulSetTemplateSpec"
                },
                "cloneSetTemplate": {
                    "description": "CloneSet template",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.CloneSetTemplateSpec"
                },
                "deploymentTemplate": {
                    "description": "Deployment template",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.DeploymentTemplateSpec"
                },
                "statefulSetTemplate": {
                    "description": "StatefulSet template",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.StatefulSetTemplateSpec"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SubsetTemplate",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.SyncStatus": {
            "description": "SyncStatus is summary of the status of all images pulling tasks on the node.",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "syncAt": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "SyncStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.TargetFilter": {
            "description": "TargetFilter is an optional parameter that allows WorkloadSpread to manage only a subset of the Pods generated by the target workload.\n\nFor example, suppose a WorkloadSpread points to the following Kubeflow TFJob resource:\n\n\t```yaml\n\tapiVersion: kubeflow.org/v1\n\tkind: TFJob\n\tspec:\n\t  tfReplicaSpecs:\n\t\tPS:\n\t\t  replicas: 1\n\t\t  ...\n\t\tMASTER:\n\t\t  replicas: 1\n\t\t  ...\n\t\tWorker:\n\t\t  replicas: 2\n\t\t  ...\n\t```\n\nIf you want to manage only the 2 Worker Pods that are generated, you need to configure the TargetFilter as follows:\n\n\t```yaml\n\ttargetFilter:\n\t  selector:\n\t\tmatchLabels:\n\t\t  role: worker\n\t  replicasPathList:\n\t\t- spec.tfReplicaSpecs.Worker.replicas\n\t```\n\nWith this configuration, the PS Pods and Master Pods generated by the TFJob will not be managed by WorkloadSpread and will not be counted toward the total number of replicas.",
            "type": "object",
            "properties": {
                "replicasPathList": {
                    "description": "ReplicasPathList is a list of resource paths used to specify how to determine the total number of replicas of the target workload after filtering. If this list is not empty, WorkloadSpread will look for the corresponding values in the target resource according to each path, and treat the sum of these values as the total number of replicas after filtering.\n\nThe replicas path is a dot-separated path, similar to \"spec.replicas\". If there are arrays, you can use numbers to denote indexes, like \"subsets.1.replicas\". The real values of these paths must be integers.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "selector": {
                    "description": "Selector is used to filter the Pods to be managed.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "TargetFilter",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.TargetReference": {
            "description": "TargetReference contains enough information to let you identify an workload",
            "type": "object",
            "required": [
                "apiVersion",
                "kind",
                "name"
            ],
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string",
                    "default": ""
                },
                "kind": {
                    "description": "Kind of the referent.",
                    "type": "string",
                    "default": ""
                },
                "name": {
                    "description": "Name of the referent.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "TargetReference",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.Topology": {
            "description": "Topology defines the spread detail of each subset under UnitedDeployment. A UnitedDeployment manages multiple homogeneous workloads which are called subset. Each of subsets under the UnitedDeployment is described in Topology.",
            "type": "object",
            "properties": {
                "scheduleStrategy": {
                    "description": "ScheduleStrategy indicates the strategy the UnitedDeployment used to preform the schedule between each of subsets.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeploymentScheduleStrategy"
                },
                "subsets": {
                    "description": "Contains the details of each subset. Each element in this array represents one subset which will be provisioned and managed by UnitedDeployment.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.Subset"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "Topology",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.TransferEnvVar": {
            "type": "object",
            "properties": {
                "envName": {
                    "type": "string"
                },
                "envNames": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "default": ""
                    }
                },
                "sourceContainerName": {
                    "type": "string"
                },
                "sourceContainerNameFrom": {
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SourceContainerNameSource"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "TransferEnvVar",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeployment": {
            "description": "UnitedDeployment is the Schema for the uniteddeployments API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeploymentSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeploymentStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeployment",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentCondition": {
            "description": "UnitedDeploymentCondition describes current state of a UnitedDeployment.",
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human-readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of in place set condition.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentList": {
            "description": "UnitedDeploymentList contains a list of UnitedDeployment",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeployment"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentScheduleStrategy": {
            "description": "UnitedDeploymentScheduleStrategy defines the schedule performance of UnitedDeployment.",
            "type": "object",
            "properties": {
                "adaptive": {
                    "description": "Adaptive is used to communicate parameters when Type is AdaptiveUnitedDeploymentScheduleStrategyType.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.AdaptiveUnitedDeploymentStrategy"
                },
                "type": {
                    "description": "Type indicates the type of the UnitedDeploymentScheduleStrategy. Default is Fixed",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentScheduleStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentSpec": {
            "description": "UnitedDeploymentSpec defines the desired state of UnitedDeployment.",
            "type": "object",
            "required": [
                "selector"
            ],
            "properties": {
                "replicas": {
                    "description": "Replicas is the total desired replicas of all the subsets. If unspecified, defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "revisionHistoryLimit": {
                    "description": "Indicates the number of histories to be conserved. If unspecified, defaults to 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "selector": {
                    "description": "Selector is a label query over pods that should match the replica count. It must match the pod template's labels.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "template": {
                    "description": "Template describes the subset that will be created.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.SubsetTemplate"
                },
                "topology": {
                    "description": "Topology describes the pods distribution detail between each of subsets.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.Topology"
                },
                "updateStrategy": {
                    "description": "UpdateStrategy indicates the strategy the UnitedDeployment use to preform the update, when template is changed.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeploymentUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentStatus": {
            "description": "UnitedDeploymentStatus defines the observed state of UnitedDeployment.",
            "type": "object",
            "required": [
                "replicas",
                "updatedReplicas",
                "currentRevision"
            ],
            "properties": {
                "collisionCount": {
                    "description": "Count of hash collisions for the UnitedDeployment. The UnitedDeployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a UnitedDeployment's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeploymentCondition"
                    }
                },
                "currentRevision": {
                    "description": "CurrentRevision, if not empty, indicates the current version of the UnitedDeployment.",
                    "type": "string",
                    "default": ""
                },
                "labelSelector": {
                    "description": "LabelSelector is label selectors for query over pods that should match the replica count used by HPA.",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration is the most recent generation observed for this UnitedDeployment. It corresponds to the UnitedDeployment's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "The number of ready replicas.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Replicas is the most recently observed number of replicas.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "subsetReplicas": {
                    "description": "Records the topology detail information of the replicas of each subset.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    }
                },
                "subsetStatuses": {
                    "description": "Record the conditions of each subset.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeploymentSubsetStatus"
                    }
                },
                "updateStatus": {
                    "description": "Records the information of update progress.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.UpdateStatus"
                },
                "updatedReadyReplicas": {
                    "description": "The number of ready current revision replicas for this UnitedDeployment.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReplicas": {
                    "description": "The number of pods in current version.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentSubsetCondition": {
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentSubsetCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentSubsetStatus": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Conditions is an array of current observed subset conditions.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.UnitedDeploymentSubsetCondition"
                    }
                },
                "name": {
                    "description": "Subset name specified in Topology.Subsets",
                    "type": "string"
                },
                "partition": {
                    "description": "Records the current partition. Currently unused.",
                    "type": "integer",
                    "format": "int32"
                },
                "replicas": {
                    "description": "Recores the current replicas. Currently unused.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentSubsetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnitedDeploymentUpdateStrategy": {
            "description": "UnitedDeploymentUpdateStrategy defines the update performance when template of UnitedDeployment is changed.",
            "type": "object",
            "properties": {
                "manualUpdate": {
                    "description": "Includes all of the parameters a Manual update strategy needs.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.ManualUpdate"
                },
                "type": {
                    "description": "Type of UnitedDeployment update strategy. Default is Manual.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnitedDeploymentUpdateStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UnorderedUpdateStrategy": {
            "description": "UnorderedUpdateStrategy defines strategies for non-ordered update.",
            "type": "object",
            "properties": {
                "priorityStrategy": {
                    "description": "Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.",
                    "$ref": "#/definitions/io.kruise.apps.pub.UpdatePriorityStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnorderedUpdateStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UpdateScatterTerm": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "default": ""
                },
                "value": {
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UpdateScatterTerm",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.UpdateStatus": {
            "description": "UpdateStatus defines the observed update state of UnitedDeployment.",
            "type": "object",
            "properties": {
                "currentPartitions": {
                    "description": "Records the current partition.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                    }
                },
                "updatedRevision": {
                    "description": "Records the latest revision.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UpdateStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpread": {
            "description": "WorkloadSpread is the Schema for the WorkloadSpread API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpreadSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpreadStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpread",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpreadList": {
            "description": "WorkloadSpreadList contains a list of WorkloadSpread",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpread"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpreadList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpreadScheduleStrategy": {
            "description": "WorkloadSpreadScheduleStrategy defines the schedule performance of WorkloadSpread",
            "type": "object",
            "properties": {
                "adaptive": {
                    "description": "Adaptive is used to communicate parameters when Type is AdaptiveWorkloadSpreadScheduleStrategyType.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.AdaptiveWorkloadSpreadStrategy"
                },
                "type": {
                    "description": "Type indicates the type of the WorkloadSpreadScheduleStrategy. Default is Fixed",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpreadScheduleStrategy",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpreadSpec": {
            "description": "WorkloadSpreadSpec defines the desired state of WorkloadSpread.",
            "type": "object",
            "required": [
                "targetRef",
                "subsets"
            ],
            "properties": {
                "scheduleStrategy": {
                    "description": "ScheduleStrategy indicates the strategy the WorkloadSpread used to preform the schedule between each of subsets.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpreadScheduleStrategy"
                },
                "subsets": {
                    "description": "Subsets describes the pods distribution details between each of subsets.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpreadSubset"
                    },
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "targetFilter": {
                    "description": "TargetFilter allows WorkloadSpread to manage only a portion of the Pods in the TargetReference: by specifying the criteria for the Pods to be managed through a label selector, and by specifying how to obtain the total number of these selected Pods from the workload using replicasPaths.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.TargetFilter"
                },
                "targetRef": {
                    "description": "TargetReference is the target workload that WorkloadSpread want to control.",
                    "$ref": "#/definitions/io.kruise.apps.v1alpha1.TargetReference"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpreadSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpreadStatus": {
            "description": "WorkloadSpreadStatus defines the observed state of WorkloadSpread.",
            "type": "object",
            "properties": {
                "observedGeneration": {
                    "description": "ObservedGeneration is the most recent generation observed for this WorkloadSpread. It corresponds to the WorkloadSpread's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "subsetStatuses": {
                    "description": "Contains the status of each subset. Each element in this array represents one subset",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpreadSubsetStatus"
                    }
                },
                "versionedSubsetStatuses": {
                    "description": "VersionedSubsetStatuses is to solve rolling-update problems, where the creation of new-version pod may be earlier than deletion of old-version pod. We have to calculate the pod subset distribution for each version.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "default": {},
                            "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpreadSubsetStatus"
                        }
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpreadStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpreadSubset": {
            "description": "WorkloadSpreadSubset defines the details of a subset.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "maxReplicas": {
                    "description": "MaxReplicas indicates the desired max replicas of this subset.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "name": {
                    "description": "Name should be unique between all of the subsets under one WorkloadSpread.",
                    "type": "string",
                    "default": ""
                },
                "patch": {
                    "description": "Patch indicates patching podTemplate to the Pod.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
                },
                "preferredNodeSelectorTerms": {
                    "description": "Indicates the node preferred selector to form the subset.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
                    }
                },
                "requiredNodeSelectorTerm": {
                    "description": "Indicates the node required selector to form the subset.",
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
                },
                "tolerations": {
                    "description": "Indicates the tolerations the pods under this subset have.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpreadSubset",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpreadSubsetCondition": {
            "type": "object",
            "required": [
                "type",
                "status"
            ],
            "properties": {
                "lastTransitionTime": {
                    "description": "Last time the condition transitioned from one status to another.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.",
                    "type": "string",
                    "default": ""
                },
                "type": {
                    "description": "Type of in place set condition.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpreadSubsetCondition",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1alpha1.WorkloadSpreadSubsetStatus": {
            "description": "WorkloadSpreadSubsetStatus defines the observed state of subset",
            "type": "object",
            "required": [
                "name",
                "replicas",
                "missingReplicas"
            ],
            "properties": {
                "conditions": {
                    "description": "Conditions is an array of current observed subset conditions.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1alpha1.WorkloadSpreadSubsetCondition"
                    }
                },
                "creatingPods": {
                    "description": "CreatingPods contains information about pods whose creation was processed by the webhook handler but not yet been observed by the WorkloadSpread controller. A pod will be in this map from the time when the webhook handler processed the creation request to the time when the pod is seen by controller. The key in the map is the name of the pod and the value is the time when the webhook handler process the creation request. If the real creation didn't happen and a pod is still in this map, it will be removed from the list automatically by WorkloadSpread controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod creations.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                    }
                },
                "deletingPods": {
                    "description": "DeletingPods is similar with CreatingPods and it contains information about pod deletion.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                    }
                },
                "missingReplicas": {
                    "description": "MissingReplicas is the number of active replicas belong to this subset not be found. MissingReplicas \u003e 0 indicates the subset is still missing MissingReplicas pods to create MissingReplicas = 0 indicates the subset already has enough pods, there is no need to create MissingReplicas = -1 indicates the subset's MaxReplicas not set, then there is no limit for pods number",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "name": {
                    "description": "Name should be unique between all of the subsets under one WorkloadSpread.",
                    "type": "string",
                    "default": ""
                },
                "replicas": {
                    "description": "Replicas is the most recently observed number of active replicas for subset.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "WorkloadSpreadSubsetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.RollingUpdateStatefulSetStrategy": {
            "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
            "type": "object",
            "properties": {
                "inPlaceUpdateStrategy": {
                    "description": "InPlaceUpdateStrategy contains strategies for in-place update.",
                    "$ref": "#/definitions/io.kruise.apps.pub.InPlaceUpdateStrategy"
                },
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy. Defaults to 1.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "minReadySeconds": {
                    "description": "MinReadySeconds indicates how long will the pod be considered ready after it's updated. MinReadySeconds works with both OrderedReady and Parallel podManagementPolicy. It affects the pod scale up speed when the podManagementPolicy is set to be OrderedReady. Combined with MaxUnavailable, it affects the pod update speed regardless of podManagementPolicy. Default value is 0, max is 300.",
                    "type": "integer",
                    "format": "int32"
                },
                "partition": {
                    "description": "Partition indicates the number of pods the StatefulSet should be partitioned by default.\n  - It means controller will update $(replicas - partition) number of pod.\nDefault value is 0.",
                    "type": "integer",
                    "format": "int32"
                },
                "paused": {
                    "description": "Paused indicates that the StatefulSet is paused. Default value is false",
                    "type": "boolean"
                },
                "podUpdatePolicy": {
                    "description": "PodUpdatePolicy indicates how pods should be updated Default value is \"ReCreate\"",
                    "type": "string"
                },
                "unorderedUpdate": {
                    "description": "UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy",
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.UnorderedUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "RollingUpdateStatefulSetStrategy",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSet": {
            "description": "StatefulSet is the Schema for the statefulsets API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSet",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSetList": {
            "description": "StatefulSetList contains a list of StatefulSet",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSet"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetList",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSetOrdinals": {
            "description": "StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.",
            "type": "object",
            "properties": {
                "start": {
                    "description": "start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:\n  [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).\nIf unset, defaults to 0. Replica indices will be in the range:\n  [0, .spec.replicas).",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetOrdinals",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSetPersistentVolumeClaimRetentionPolicy": {
            "description": "StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaims.",
            "type": "object",
            "properties": {
                "whenDeleted": {
                    "description": "WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.",
                    "type": "string"
                },
                "whenScaled": {
                    "description": "WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetPersistentVolumeClaimRetentionPolicy",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSetScaleStrategy": {
            "description": "StatefulSetScaleStrategy defines strategies for pods scale.",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "The maximum number of pods that can be unavailable during scaling. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. It can just be allowed to work with Parallel podManagementPolicy.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetScaleStrategy",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSetSpec": {
            "description": "StatefulSetSpec defines the desired state of StatefulSet",
            "type": "object",
            "required": [
                "selector",
                "template"
            ],
            "properties": {
                "lifecycle": {
                    "description": "Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update.",
                    "$ref": "#/definitions/io.kruise.apps.pub.Lifecycle"
                },
                "ordinals": {
                    "description": "ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested. Using the ordinals field requires the StatefulSetStartOrdinal feature gate to be enabled, which is beta.",
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSetOrdinals"
                },
                "persistentVolumeClaimRetentionPolicy": {
                    "description": "PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.",
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSetPersistentVolumeClaimRetentionPolicy"
                },
                "podManagementPolicy": {
                    "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
                    "type": "string"
                },
                "replicas": {
                    "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
                    "type": "integer",
                    "format": "int32"
                },
                "reserveOrdinals": {
                    "description": "reserveOrdinals controls the ordinal numbers that should be reserved, and the replicas will always be the expectation number of running Pods. For a sts with replicas=3 and its Pods in [0, 1, 2]: - If you want to migrate Pod-1 and reserve this ordinal, just set spec.reserveOrdinal to [1].\n  Then controller will delete Pod-1 and create Pod-3 (existing Pods will be [0, 2, 3])\n- If you just want to delete Pod-1, you should set spec.reserveOrdinal to [1] and spec.replicas to 2.\n  Then controller will delete Pod-1 (existing Pods will be [0, 2])\nYou can also use ranges along with numbers, such as [1, 3-5], which is a shortcut for [1, 3, 4, 5].",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                    }
                },
                "revisionHistoryLimit": {
                    "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
                    "type": "integer",
                    "format": "int32"
                },
                "scaleStrategy": {
                    "description": "scaleStrategy indicates the StatefulSetScaleStrategy that will be employed to scale Pods in the StatefulSet.",
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSetScaleStrategy"
                },
                "selector": {
                    "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "serviceName": {
                    "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
                    "type": "string"
                },
                "template": {
                    "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
                },
                "updateStrategy": {
                    "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.StatefulSetUpdateStrategy"
                },
                "volumeClaimTemplates": {
                    "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
                    }
                },
                "volumeClaimUpdateStrategy": {
                    "description": "VolumeClaimUpdateStrategy specifies the strategy for updating VolumeClaimTemplates within a StatefulSet. This field is currently only effective if the StatefulSetAutoResizePVCGate is enabled.",
                    "default": {},
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.VolumeClaimUpdateStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetSpec",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSetStatus": {
            "description": "StatefulSetStatus defines the observed state of StatefulSet",
            "type": "object",
            "required": [
                "replicas",
                "readyReplicas",
                "availableReplicas",
                "currentReplicas",
                "updatedReplicas"
            ],
            "properties": {
                "availableReplicas": {
                    "description": "AvailableReplicas is the number of Pods created by the StatefulSet controller that have been ready for minReadySeconds.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "collisionCount": {
                    "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
                    "type": "integer",
                    "format": "int32"
                },
                "conditions": {
                    "description": "Represents the latest available observations of a statefulset's current state.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
                    },
                    "x-kubernetes-patch-merge-key": "type",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "currentReplicas": {
                    "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "currentRevision": {
                    "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
                    "type": "string"
                },
                "labelSelector": {
                    "description": "LabelSelector is label selectors for query over pods that should match the replica count used by HPA.",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
                    "type": "integer",
                    "format": "int64"
                },
                "readyReplicas": {
                    "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "replicas": {
                    "description": "replicas is the number of Pods created by the StatefulSet controller.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "updateRevision": {
                    "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
                    "type": "string"
                },
                "updatedAvailableReplicas": {
                    "description": "updatedAvailableReplicas is the number of updated Pods created by the StatefulSet controller that have a Ready condition for atleast minReadySeconds.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReadyReplicas": {
                    "description": "updatedReadyReplicas is the number of updated Pods created by the StatefulSet controller that have a Ready Condition.",
                    "type": "integer",
                    "format": "int32"
                },
                "updatedReplicas": {
                    "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "volumeClaims": {
                    "description": "VolumeClaims represents the status of compatibility between existing PVCs and their respective templates. It tracks whether the PersistentVolumeClaims have been updated to match any changes made to the volumeClaimTemplates, ensuring synchronization between the defined templates and the actual PersistentVolumeClaims in use.",
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.apps.v1beta1.VolumeClaimStatus"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetStatus",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.StatefulSetUpdateStrategy": {
            "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
            "type": "object",
            "properties": {
                "rollingUpdate": {
                    "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
                    "$ref": "#/definitions/io.kruise.apps.v1beta1.RollingUpdateStatefulSetStrategy"
                },
                "type": {
                    "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "StatefulSetUpdateStrategy",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.UnorderedUpdateStrategy": {
            "description": "UnorderedUpdateStrategy defines strategies for non-ordered update.",
            "type": "object",
            "properties": {
                "priorityStrategy": {
                    "description": "Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.",
                    "$ref": "#/definitions/io.kruise.apps.pub.UpdatePriorityStrategy"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "UnorderedUpdateStrategy",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.VolumeClaimStatus": {
            "description": "VolumeClaimStatus describes the status of a volume claim template. It provides details about the compatibility and readiness of the volume claim.",
            "type": "object",
            "required": [
                "volumeClaimName",
                "compatibleReplicas",
                "compatibleReadyReplicas"
            ],
            "properties": {
                "compatibleReadyReplicas": {
                    "description": "CompatibleReadyReplicas is the number of replicas that are both ready and compatible with the volume claim. It highlights that these replicas are not only compatible but also ready to be put into service immediately. Compatibility is determined by whether the pvc spec storage requests are greater than or equal to the template spec storage requests The \"ready\" status is determined by whether the PVC status capacity is greater than or equal to the PVC spec storage requests.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "compatibleReplicas": {
                    "description": "CompatibleReplicas is the number of replicas currently compatible with the volume claim. It indicates how many replicas can function properly, being compatible with this volume claim. Compatibility is determined by whether the PVC spec storage requests are greater than or equal to the template spec storage requests",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "volumeClaimName": {
                    "description": "VolumeClaimName is the name of the volume claim. This is a unique identifier used to reference a specific volume claim.",
                    "type": "string",
                    "default": ""
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "VolumeClaimStatus",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.apps.v1beta1.VolumeClaimUpdateStrategy": {
            "description": "VolumeClaimUpdateStrategy defines the strategy for updating volume claims. This structure is used to control how updates to PersistentVolumeClaims are handled during pod rolling updates or PersistentVolumeClaim deletions.",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type specifies the type of update strategy, possible values include: OnPodRollingUpdateVolumeClaimUpdateStrategyType: Apply the update strategy during pod rolling updates. OnPVCDeleteVolumeClaimUpdateStrategyType: Apply the update strategy when a PersistentVolumeClaim is deleted.\n\nPossible enum values:\n - `\"OnDelete\"` indicates that updates are triggered when a Persistent Volume Claim (PVC) is deleted. This strategy places full control of the update timing in the hands of the user, typically executed after ensuring data has been backed up or there are no data security concerns, allowing for storage resource management that aligns with specific user requirements and security policies.\n - `\"OnPodRollingUpdate\"` indicates that volume claim updates are triggered when associated Pods undergo rolling updates. This strategy ensures that storage availability and integrity are maintained during the update process.",
                    "type": "string",
                    "enum": [
                        "OnDelete",
                        "OnPodRollingUpdate"
                    ]
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "apps.kruise.io",
                    "kind": "VolumeClaimUpdateStrategy",
                    "version": "v1beta1"
                }
            ]
        },
        "io.kruise.policy.v1alpha1.PodUnavailableBudget": {
            "description": "PodUnavailableBudget is the Schema for the podunavailablebudgets API",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                },
                "spec": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.policy.v1alpha1.PodUnavailableBudgetSpec"
                },
                "status": {
                    "default": {},
                    "$ref": "#/definitions/io.kruise.policy.v1alpha1.PodUnavailableBudgetStatus"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy.kruise.io",
                    "kind": "PodUnavailableBudget",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.policy.v1alpha1.PodUnavailableBudgetList": {
            "description": "PodUnavailableBudgetList contains a list of PodUnavailableBudget",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "default": {},
                        "$ref": "#/definitions/io.kruise.policy.v1alpha1.PodUnavailableBudget"
                    }
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "metadata": {
                    "default": {},
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy.kruise.io",
                    "kind": "PodUnavailableBudgetList",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.policy.v1alpha1.PodUnavailableBudgetSpec": {
            "description": "PodUnavailableBudgetSpec defines the desired state of PodUnavailableBudget",
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "description": "Delete pod, evict pod or update pod specification is allowed if at most \"maxUnavailable\" pods selected by \"selector\" or \"targetRef\"  are unavailable after the above operation for pod. MaxUnavailable and MinAvailable are mutually exclusive, MaxUnavailable is priority to take effect",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "minAvailable": {
                    "description": "Delete pod, evict pod or update pod specification is allowed if at least \"minAvailable\" pods selected by \"selector\" or \"targetRef\" will still be available after the above operation for pod.",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                },
                "selector": {
                    "description": "Selector label query over pods managed by the budget",
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                },
                "targetRef": {
                    "description": "TargetReference contains enough information to let you identify an workload for PodUnavailableBudget Selector and TargetReference are mutually exclusive, TargetReference is priority to take effect",
                    "$ref": "#/definitions/io.kruise.policy.v1alpha1.TargetReference"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy.kruise.io",
                    "kind": "PodUnavailableBudgetSpec",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.policy.v1alpha1.PodUnavailableBudgetStatus": {
            "description": "PodUnavailableBudgetStatus defines the observed state of PodUnavailableBudget",
            "type": "object",
            "required": [
                "unavailableAllowed",
                "currentAvailable",
                "desiredAvailable",
                "totalReplicas"
            ],
            "properties": {
                "currentAvailable": {
                    "description": "CurrentAvailable current number of available pods",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "desiredAvailable": {
                    "description": "DesiredAvailable minimum desired number of available pods",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "disruptedPods": {
                    "description": "DisruptedPods contains information about pods whose eviction or deletion was processed by the API handler but has not yet been observed by the PodUnavailableBudget.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                    }
                },
                "observedGeneration": {
                    "description": "Most recent generation observed when updating this PUB status. UnavailableAllowed and other status information is valid only if observedGeneration equals to PUB's object generation.",
                    "type": "integer",
                    "format": "int64",
                    "default": 0
                },
                "totalReplicas": {
                    "description": "TotalReplicas total number of pods counted by this unavailable budget",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "unavailableAllowed": {
                    "description": "UnavailableAllowed number of pod unavailable that are currently allowed",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                },
                "unavailablePods": {
                    "description": "UnavailablePods contains information about pods whose specification changed(inplace-update pod), once pod is available(consistent and ready) again, it will be removed from the list.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                    }
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy.kruise.io",
                    "kind": "PodUnavailableBudgetStatus",
                    "version": "v1alpha1"
                }
            ]
        },
        "io.kruise.policy.v1alpha1.TargetReference": {
            "description": "TargetReference contains enough information to let you identify an workload for PodUnavailableBudget",
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of the referent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.",
                    "type": "string"
                }
            },
            "x-kubernetes-group-version-kind": [
                {
                    "group": "policy.kruise.io",
                    "kind": "TargetReference",
                    "version": "v1alpha1"
                }
            ]
        }
    }
}