/*
Copyright 2020 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise-api/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloneSetLister helps list CloneSets.
type CloneSetLister interface {
	// List lists all CloneSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CloneSet, err error)
	// CloneSets returns an object that can list and get CloneSets.
	CloneSets(namespace string) CloneSetNamespaceLister
	CloneSetListerExpansion
}

// cloneSetLister implements the CloneSetLister interface.
type cloneSetLister struct {
	indexer cache.Indexer
}

// NewCloneSetLister returns a new CloneSetLister.
func NewCloneSetLister(indexer cache.Indexer) CloneSetLister {
	return &cloneSetLister{indexer: indexer}
}

// List lists all CloneSets in the indexer.
func (s *cloneSetLister) List(selector labels.Selector) (ret []*v1alpha1.CloneSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloneSet))
	})
	return ret, err
}

// CloneSets returns an object that can list and get CloneSets.
func (s *cloneSetLister) CloneSets(namespace string) CloneSetNamespaceLister {
	return cloneSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloneSetNamespaceLister helps list and get CloneSets.
type CloneSetNamespaceLister interface {
	// List lists all CloneSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CloneSet, err error)
	// Get retrieves the CloneSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CloneSet, error)
	CloneSetNamespaceListerExpansion
}

// cloneSetNamespaceLister implements the CloneSetNamespaceLister
// interface.
type cloneSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloneSets in the indexer for a given namespace.
func (s cloneSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloneSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloneSet))
	})
	return ret, err
}

// Get retrieves the CloneSet from the indexer for a given namespace and name.
func (s cloneSetNamespaceLister) Get(name string) (*v1alpha1.CloneSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloneset"), name)
	}
	return obj.(*v1alpha1.CloneSet), nil
}
