/*
Copyright 2022 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise-api/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UnitedDeploymentLister helps list UnitedDeployments.
// All objects returned here must be treated as read-only.
type UnitedDeploymentLister interface {
	// List lists all UnitedDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UnitedDeployment, err error)
	// UnitedDeployments returns an object that can list and get UnitedDeployments.
	UnitedDeployments(namespace string) UnitedDeploymentNamespaceLister
	UnitedDeploymentListerExpansion
}

// unitedDeploymentLister implements the UnitedDeploymentLister interface.
type unitedDeploymentLister struct {
	indexer cache.Indexer
}

// NewUnitedDeploymentLister returns a new UnitedDeploymentLister.
func NewUnitedDeploymentLister(indexer cache.Indexer) UnitedDeploymentLister {
	return &unitedDeploymentLister{indexer: indexer}
}

// List lists all UnitedDeployments in the indexer.
func (s *unitedDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.UnitedDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UnitedDeployment))
	})
	return ret, err
}

// UnitedDeployments returns an object that can list and get UnitedDeployments.
func (s *unitedDeploymentLister) UnitedDeployments(namespace string) UnitedDeploymentNamespaceLister {
	return unitedDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UnitedDeploymentNamespaceLister helps list and get UnitedDeployments.
// All objects returned here must be treated as read-only.
type UnitedDeploymentNamespaceLister interface {
	// List lists all UnitedDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UnitedDeployment, err error)
	// Get retrieves the UnitedDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UnitedDeployment, error)
	UnitedDeploymentNamespaceListerExpansion
}

// unitedDeploymentNamespaceLister implements the UnitedDeploymentNamespaceLister
// interface.
type unitedDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UnitedDeployments in the indexer for a given namespace.
func (s unitedDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UnitedDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UnitedDeployment))
	})
	return ret, err
}

// Get retrieves the UnitedDeployment from the indexer for a given namespace and name.
func (s unitedDeploymentNamespaceLister) Get(name string) (*v1alpha1.UnitedDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("uniteddeployment"), name)
	}
	return obj.(*v1alpha1.UnitedDeployment), nil
}
