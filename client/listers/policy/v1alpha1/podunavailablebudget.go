/*
Copyright 2022 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise-api/policy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodUnavailableBudgetLister helps list PodUnavailableBudgets.
// All objects returned here must be treated as read-only.
type PodUnavailableBudgetLister interface {
	// List lists all PodUnavailableBudgets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PodUnavailableBudget, err error)
	// PodUnavailableBudgets returns an object that can list and get PodUnavailableBudgets.
	PodUnavailableBudgets(namespace string) PodUnavailableBudgetNamespaceLister
	PodUnavailableBudgetListerExpansion
}

// podUnavailableBudgetLister implements the PodUnavailableBudgetLister interface.
type podUnavailableBudgetLister struct {
	indexer cache.Indexer
}

// NewPodUnavailableBudgetLister returns a new PodUnavailableBudgetLister.
func NewPodUnavailableBudgetLister(indexer cache.Indexer) PodUnavailableBudgetLister {
	return &podUnavailableBudgetLister{indexer: indexer}
}

// List lists all PodUnavailableBudgets in the indexer.
func (s *podUnavailableBudgetLister) List(selector labels.Selector) (ret []*v1alpha1.PodUnavailableBudget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodUnavailableBudget))
	})
	return ret, err
}

// PodUnavailableBudgets returns an object that can list and get PodUnavailableBudgets.
func (s *podUnavailableBudgetLister) PodUnavailableBudgets(namespace string) PodUnavailableBudgetNamespaceLister {
	return podUnavailableBudgetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodUnavailableBudgetNamespaceLister helps list and get PodUnavailableBudgets.
// All objects returned here must be treated as read-only.
type PodUnavailableBudgetNamespaceLister interface {
	// List lists all PodUnavailableBudgets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PodUnavailableBudget, err error)
	// Get retrieves the PodUnavailableBudget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PodUnavailableBudget, error)
	PodUnavailableBudgetNamespaceListerExpansion
}

// podUnavailableBudgetNamespaceLister implements the PodUnavailableBudgetNamespaceLister
// interface.
type podUnavailableBudgetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodUnavailableBudgets in the indexer for a given namespace.
func (s podUnavailableBudgetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodUnavailableBudget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodUnavailableBudget))
	})
	return ret, err
}

// Get retrieves the PodUnavailableBudget from the indexer for a given namespace and name.
func (s podUnavailableBudgetNamespaceLister) Get(name string) (*v1alpha1.PodUnavailableBudget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podunavailablebudget"), name)
	}
	return obj.(*v1alpha1.PodUnavailableBudget), nil
}
